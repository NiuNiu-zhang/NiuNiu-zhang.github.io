<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进程-linux</title>
      <link href="/2020/08/07/%E8%BF%9B%E7%A8%8B-linux/"/>
      <url>/2020/08/07/%E8%BF%9B%E7%A8%8B-linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程传输协议详解</title>
      <link href="/2020/08/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>诺瓦2020提前批笔试</title>
      <link href="/2020/08/07/%E8%AF%BA%E7%93%A62020%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95/"/>
      <url>/2020/08/07/%E8%AF%BA%E7%93%A62020%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p> flight.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> HEAD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> HEAD_H</span><span class="token comment" spellcheck="true">/* *     description: *     航班和乘客，乘客中用 GREEN、YELLOW、RED 标识身体情况， 规则: *     一列航班中 RED==0  没有问题 *     RED > 10%  紧急停机检查 *     0 &lt; RED &lt;  10% *     有风险，抵达目的地后进行检查 *     代码实现 **/</span><span class="token comment" spellcheck="true">// &lt;封装 乘客struct> select  链表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> passenger<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span> id_card<span class="token punctuation">;</span>    <span class="token keyword">struct</span> passenger <span class="token operator">*</span> pNext<span class="token punctuation">;</span>    <span class="token keyword">int</span> flight_id<span class="token punctuation">;</span>    <span class="token keyword">int</span> healthcode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 乘客的健康等级</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>passenger_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &lt;封装 flight struct></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> flight<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> orig_city<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始地</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> dest_city<span class="token punctuation">;</span>    <span class="token keyword">int</span> flight_id<span class="token punctuation">;</span>    <span class="token keyword">struct</span> flight <span class="token operator">*</span> pNext<span class="token punctuation">;</span>    passenger_t <span class="token operator">*</span> pHead_passenger<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//飞机包含乘客链表</span>    <span class="token keyword">int</span> Goodlevel<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//评估飞机的安全等级</span>    <span class="token keyword">int</span> passengerNum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存航班的乘客总人数</span>    <span class="token keyword">int</span> redNum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">int</span> yellowNum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>flight_t<span class="token punctuation">;</span><span class="token keyword">typedef</span>  <span class="token keyword">enum</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    EN_GREEN<span class="token punctuation">,</span>    EN_YELLOW<span class="token punctuation">,</span>    EN_RED<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>en_health_code<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * function:create a flightHead * return:pHead_flight */</span>flight_t <span class="token operator">*</span>  <span class="token function">createFlight</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * function:create a  passengerHead * return:pHead_passenger * */</span>passenger_t <span class="token operator">*</span> <span class="token function">createPassenger</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加航班信息</span><span class="token keyword">int</span> <span class="token function">addFlight</span><span class="token punctuation">(</span>flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span><span class="token keyword">int</span> flight_id<span class="token punctuation">,</span> <span class="token keyword">const</span>  <span class="token keyword">char</span> <span class="token operator">*</span> orig_city<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> dest_city <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加乘客信息</span><span class="token keyword">int</span>  <span class="token function">addPassenger</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> flight_id<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> id_card<span class="token punctuation">,</span> <span class="token keyword">int</span> healthcode <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">showPassenger</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span><span class="token keyword">int</span> flight_id <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showFlight</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// function:计算某航班的风险值并返回</span><span class="token keyword">int</span> <span class="token function">getRisk</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> flight_id <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span></code></pre><p>flight.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"flight.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>flight_t <span class="token operator">*</span> <span class="token function">createFlight</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> pHead_flight <span class="token operator">=</span> <span class="token punctuation">(</span>flight_t <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> flight_t <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">==</span> pHead_flight <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>flight_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> pHead_flight <span class="token punctuation">,</span> <span class="token string">'\0'</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> flight_t <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    pHead_flight<span class="token operator">-></span>flight_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pHead_flight<span class="token operator">-></span>pNext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create flight success\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pHead_flight<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>passenger_t <span class="token operator">*</span> <span class="token function">createPassenger</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    passenger_t <span class="token operator">*</span> pHead_passenger <span class="token operator">=</span> <span class="token punctuation">(</span>passenger_t <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> passenger_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">==</span> pHead_passenger <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span> passenger_t <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> pHead_passenger <span class="token punctuation">,</span> <span class="token string">'\0'</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> passenger_t <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create passenger success\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pHead_passenger<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addFlight</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> flight_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> orig_city<span class="token punctuation">,</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> dest_city <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span><span class="token operator">==</span>pHead <span class="token operator">||</span> flight_id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> orig_city <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> dest_city <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"param error!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>flight_t <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flight_t <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flight_t <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token punctuation">(</span>flight_t <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flight_t <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> pNew <span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flight_t <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不能对空指针进行赋值，  要新 malloc  pNew</span>    pNew<span class="token operator">-></span>flight_id <span class="token operator">=</span> flight_id<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>orig_city <span class="token operator">=</span> orig_city<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>dest_city <span class="token operator">=</span> dest_city<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>pHead_passenger <span class="token operator">=</span><span class="token punctuation">(</span>passenger_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> passenger_t <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> temp<span class="token operator">-></span>flight_id <span class="token operator">!=</span> flight_id <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-></span>pNext <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对，应该判断前一个，然后赋值好赋值</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span>temp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span>  <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-></span>flight_id <span class="token operator">==</span> flight_id <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"flight  already  exist!, add error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>pNext<span class="token operator">=</span>  pNew<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"add success\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showFlight</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span>  <span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"param error!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    flight_t<span class="token operator">*</span>  temp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> temp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// flight_id=0是头节点，可不打印</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">==</span> temp<span class="token operator">-></span>flight_id <span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flight_id--%d  起始地点--%s,  目的地点--%s \r\n"</span><span class="token punctuation">,</span>                temp<span class="token operator">-></span>flight_id<span class="token punctuation">,</span>                temp<span class="token operator">-></span>orig_city<span class="token punctuation">,</span>                temp<span class="token operator">-></span>dest_city              <span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"show ok\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addPassenger</span><span class="token punctuation">(</span>  flight_t <span class="token operator">*</span> pHead <span class="token punctuation">,</span><span class="token keyword">int</span> flight_id<span class="token punctuation">,</span>  <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span>         <span class="token keyword">char</span> <span class="token operator">*</span> id_card<span class="token punctuation">,</span> <span class="token keyword">int</span> healthcode <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">==</span> pHead <span class="token operator">||</span> flight_id <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> name <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> id_card <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">" param error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> ptmp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> ptmp<span class="token operator">-></span>flight_id <span class="token operator">!=</span> flight_id   <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptmp <span class="token operator">=</span> ptmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">==</span> ptmp<span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">" flight_id error!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    passenger_t <span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token punctuation">(</span> passenger_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>passenger_t <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pNew<span class="token operator">-></span>flight_id<span class="token operator">=</span>flight_id<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//0 green   1 yellow  2 red</span>    pNew<span class="token operator">-></span>healthcode<span class="token operator">=</span>healthcode<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>id_card <span class="token operator">=</span> id_card<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    ptmp<span class="token operator">-></span>passengerNum <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">==</span> healthcode  <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptmp<span class="token operator">-></span>redNum <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">==</span> healthcode <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptmp<span class="token operator">-></span>yellowNum <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    passenger_t <span class="token operator">*</span> pq <span class="token operator">=</span> <span class="token punctuation">(</span> passenger_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>passenger_t <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pq <span class="token operator">=</span> ptmp<span class="token operator">-></span>pHead_passenger<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> pq<span class="token operator">-></span>pNext <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pq <span class="token operator">=</span> pq<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    pq<span class="token operator">-></span>pNext <span class="token operator">=</span> pNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">showPassenger</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span>  <span class="token keyword">int</span> flight_id <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">==</span> pHead <span class="token operator">||</span> flight_id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">" param error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> temp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用temp->pNext 做判断最后好赋值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> temp<span class="token operator">-></span>pNext <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-></span>flight_id <span class="token operator">!=</span> flight_id <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-></span>flight_id <span class="token operator">!=</span> flight_id <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-></span>pNext <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">" flight_id error!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-></span>flight_id <span class="token operator">==</span> flight_id <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//passenger_t * pp = temp->pHead_passenger;  因为第一个是头节点，不打印</span>        passenger_t  <span class="token operator">*</span> pp <span class="token operator">=</span> temp<span class="token operator">-></span>pHead_passenger<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> pp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//遍历打印是   pp != NULL</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"passenger info:// name:%s,   card_id:%s,   healthcode:%d,  flight_id:%d,   origCity:%s,  destCity:%s \r\n"</span><span class="token punctuation">,</span>                    pp<span class="token operator">-></span>name<span class="token punctuation">,</span>pp<span class="token operator">-></span>id_card<span class="token punctuation">,</span>pp<span class="token operator">-></span>healthcode<span class="token punctuation">,</span>pp<span class="token operator">-></span>flight_id<span class="token punctuation">,</span> temp<span class="token operator">-></span>orig_city<span class="token punctuation">,</span>temp<span class="token operator">-></span>dest_city<span class="token punctuation">)</span><span class="token punctuation">;</span>            pp<span class="token operator">=</span>pp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">getRisk</span><span class="token punctuation">(</span> flight_t <span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> flight_id <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">==</span> pHead <span class="token operator">||</span> flight_id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">" param error!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> ptemp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> ptemp<span class="token operator">-></span>flight_id <span class="token operator">!=</span> flight_id <span class="token operator">&amp;&amp;</span> ptemp<span class="token operator">-></span>pNext <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptemp <span class="token operator">=</span> ptemp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> ptemp<span class="token operator">-></span>pNext <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> ptemp<span class="token operator">-></span>flight_id <span class="token operator">!=</span> flight_id<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> redRisk <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>ptemp<span class="token operator">-></span>redNum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>ptemp<span class="token operator">-></span>passengerNum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"passengerNum=%d, redNum=%d, yellowNum=%d\r\n"</span><span class="token punctuation">,</span>ptemp<span class="token operator">-></span>passengerNum<span class="token punctuation">,</span>ptemp<span class="token operator">-></span>redNum<span class="token punctuation">,</span> ptemp<span class="token operator">-></span>yellowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"redRisk=%f\r\n"</span><span class="token punctuation">,</span> redRisk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">==</span> redRisk<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptemp<span class="token operator">-></span>Goodlevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"plane safe, take off\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> redRisk <span class="token operator">>=</span> <span class="token number">0.1</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptemp<span class="token operator">-></span>Goodlevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dangerous!!!!stop \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> redRisk <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> redRisk <span class="token operator">&lt;</span> <span class="token number">0.1</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ptemp<span class="token operator">-></span>Goodlevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"just ok,but still need to be examine\r\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>main.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"flight.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>'<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    flight_t <span class="token operator">*</span> pHead_flight <span class="token operator">=</span> <span class="token function">createFlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    passenger_t <span class="token operator">*</span> pHead_passenger <span class="token operator">=</span> <span class="token function">createPassenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addFlight</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhengzhou"</span><span class="token punctuation">,</span><span class="token string">"xian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addFlight</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token string">"xian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//addFlight(pHead_flight, 2, "xinjiang","xian");</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"SU"</span><span class="token punctuation">,</span>  <span class="token string">"sadw"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"zhang"</span><span class="token punctuation">,</span><span class="token string">"334"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">,</span>   <span class="token string">"888"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"q"</span><span class="token punctuation">,</span>    <span class="token string">"812"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"s"</span><span class="token punctuation">,</span>    <span class="token string">"833"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"qwd"</span><span class="token punctuation">,</span>  <span class="token string">"124"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"trgh"</span><span class="token punctuation">,</span> <span class="token string">"oa9"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dwew"</span><span class="token punctuation">,</span> <span class="token string">"wevc"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"uh"</span><span class="token punctuation">,</span>   <span class="token string">"okn"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"sfd"</span><span class="token punctuation">,</span>    <span class="token string">"plm"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"yth"</span><span class="token punctuation">,</span>    <span class="token string">"adv"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"sf"</span><span class="token punctuation">,</span>    <span class="token string">"okq"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"alib"</span><span class="token punctuation">,</span>    <span class="token string">"13df"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"niuniu"</span><span class="token punctuation">,</span><span class="token string">"asf3"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"gui"</span><span class="token punctuation">,</span>  <span class="token string">"qa1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"ww"</span><span class="token punctuation">,</span>    <span class="token string">"qa2"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"gg"</span><span class="token punctuation">,</span>    <span class="token string">"qa3"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"ym"</span><span class="token punctuation">,</span>    <span class="token string">"qa4"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"shui"</span><span class="token punctuation">,</span>    <span class="token string">"qa5"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"alp"</span><span class="token punctuation">,</span>    <span class="token string">"ws5"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"hub"</span><span class="token punctuation">,</span>    <span class="token string">"sf6"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getRisk</span><span class="token punctuation">(</span> pHead_flight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getRisk</span><span class="token punctuation">(</span> pHead_flight<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showFlight</span><span class="token punctuation">(</span> pHead_flight <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showPassenger</span><span class="token punctuation">(</span>pHead_flight<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>'<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>运行效果参考：<br><img src="/images/flight.png"><br><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\flight.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程-linux</title>
      <link href="/2020/08/05/%E7%BA%BF%E7%A8%8B-linux/"/>
      <url>/2020/08/05/%E7%BA%BF%E7%A8%8B-linux/</url>
      
        <content type="html"><![CDATA[<h4 id="线程–轻量级进程-内核调度的最小单元"><a href="#线程–轻量级进程-内核调度的最小单元" class="headerlink" title="线程–轻量级进程   //  内核调度的最小单元"></a>线程–轻量级进程   //  内核调度的最小单元</h4><p>为了进一步减少处理器的空转时间，支持多处理器，减少上下文切换开销</p><p>上下文切换：指的是内核（操作系统的核心）在CPU上对进程或者线程进行切换，上下文切换过程中的信息被保存在进程控制块（PCB-Process Control Block）中</p><p>过程：</p><p>`</p><pre><code>[1]先挂起一个进程，把这个进程在cpu中的状态（上下文信息）存储在内存的 PCB 中[2]在PCB中检索下一个进程的上下文并将其在CPU的寄存器中恢复[3]跳转到程序计数器所指向的位置（即跳转到进程被中断时的代码行）并恢复该进程`</code></pre><p>linux中的线程依赖于  pthread 线程库</p><p>1、创建线程： <code>pthread_create( pthread_t  * thread, pthread_attr_t *attr,void *( *start_routine)(void *), void * arg);</code></p><p>thread:    线程标识符</p><p>attr: 线程属性设置，  NULL 表示缺省属性</p><p>start_routine: 线程执行函数，参数和返回值都是 void *</p><p>arg: 传递给 线程执行函数用的参数</p><p>return:  success:0   error:错误码    </p><p>2、退出线程: <code> pthread_exit( void * retval );</code></p><p>retval: 线程结束时的返回值， 可以通过 pthread_join() 来接收<br>//但是使用中不能用 exit 退出线程，因为一般一个进程中包含多个线程，exit的作用是使当前进程终止，进程中所以线程都会over—<br>所以退出线程用 pthread_exit() 来替代</p><p>线程主动结束：可以调用 pthread_exit()</p><p>一个线程终止另外一个线程： 调用  pthread_cancel() 实现<br>// 在被取消的线程内部要  先调用 pthread_setcancel() 和 pthread_setcanceltype() 设置相应的取消状态</p><p>3、pthread_join()  以阻塞的方式等待 thread 指定的线程结束，函数返回时，被等待线程的资源被回收，如果线程已经结束，该函数会立即返回</p><p>resutn: success:0   error:错误号</p><p>函数原型：<code> pthread_ioin( pthread_t pthread, void ** thread_result );</code></p><p>thread:被等待线程的标识符</p><p>thread_result: 用户定义的指针，用来接收被等待线程结束时的返回值（如果返回不为NULL）</p><p>**<br>为什么是二级指针：**原因：一级指针只能用来改变指向内存的值，传递的就是指针p内存的地址,所以修改它就是修改了它自己的指向;</p><p>4、<code>pthread_cancel( pthread_t thread )</code></p><p>thread: 要取消的线程的 标识符</p><p>return:  success:0    error:错误码</p><p>线程函数使用 Demo<br> // 编译的时候需要链接 pthread</p><p>thread.h</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;stdlib.h&gt;</p><p>#include &lt;pthread.h&gt;</p><p>#define THREAD_NUM 3     // 线程数</p><p>#define REPEAT_TIMES 5 //每个线程中的循环次数限制</p><p>#define DELAY_TIME  6.0  //循环之间的最大时间间隔</p><p>线程处理函数</p><p>void * thread_function( void * arg)<br>{</p><pre><code>int thread_num = (int )arg;  //线程总数int delay_time = 0;   //延时int count = 0;        //计调用次数printf(&quot;thread %d start!\r\n&quot;,thread_num);for (count=0;count&lt;REPEAT_TIMES; count++ )&#123;    delay_time = (int)( rand() * DELAY_TIME / (RAND_MAX) ) +1 ;    sleep( delay_time );   //随机等待1--6 s, 模拟任务完成的时间随机    printf(&quot;Thread %d :job %d delay = %d\r\n&quot;, thread_num,count, delay_time);&#125;printf(&quot;Thread %d is finished\r\n&quot;, thread_num);pthread_exit(NULL);   //任务完成自行结束</code></pre><p>}</p><p>main.c</p><p>#include “thread.h”</p><p>int main( void )<br>{</p><pre><code>pthread_t thread[THREAD_NUM];  //定义存放 thread 号的类型数组int no = 0,res;void * thread_ret;srand( time( NULL ));   //埋下时间种子for( no=0; no&lt;THREAD_NUM; no++)&#123;    res = pthread_create(&amp;thread[no], NULL, thread_function, (void*)no );  //创建的时候是  pthread_t *    // no 标识是第几个线程    if ( res != 0 )  //create error    &#123;        printf(&quot;Create thread %d error\r\n&quot;, no);        exit(res);  // 结束进程， &lt;stdlib.h&gt; 参数不为0都异常    &#125;&#125;printf(&quot;Create threads success!\r\n&quot;);for( no=0;no&lt;THREAD_NUM;no++)&#123;    // pthread_join:  pthread_t thread    res = pthread_join( thread[no], &amp;thread_ret);   //阻塞式等待线程退出    //param_2  被等待线程结束的返回值,  void ** thread_result    if ( 0 == res ) //success:0   error:错误号    &#123;        printf(&quot;Thread %d joined\r\n&quot;,no);    &#125;    else    &#123;        printf(&quot;Thread %d joined failed\r\n&quot;, no);    &#125;&#125;return 0;</code></pre><p>}</p><p>运行情况：<br><img src="/images/pthread.png"></p>]]></content>
      
      
      <categories>
          
          <category> 多进程/线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制间转换</title>
      <link href="/2020/08/04/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/08/04/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>&lt;10进制—&gt;2进制&gt;</p><pre class=" language-c"><code class="language-c">ex<span class="token punctuation">:</span>  <span class="token number">19</span><span class="token operator">--</span><span class="token operator">-></span>     <span class="token number">19</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    反序取余数   <span class="token number">10011</span></code></pre><p><img src="/images/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.jpg"></p><p><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\进制转换.jpg"></p><p>10进制中的 小数部分–&gt;2进制</p><pre class=" language-c"><code class="language-c">ex<span class="token punctuation">:</span> <span class="token number">0.75</span>小数不断×<span class="token number">2</span>取整，直到没有小数为止，注意<span class="token punctuation">:</span>不是所有的小数都可以转为 <span class="token number">2</span> 进制    <span class="token number">0.75</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.5</span> 取整 <span class="token number">1</span>    <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span>  顺序取数得<span class="token punctuation">:</span>  <span class="token number">0.11</span></code></pre><p>&lt;16进制—-&gt; 10进制 &gt;</p><pre class=" language-c"><code class="language-c"><span class="token number">16</span>进制 是 <span class="token number">16</span> 进 <span class="token number">1</span>   <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> B C D E <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>ex<span class="token punctuation">:</span> 2AF5    <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span> <span class="token number">16</span><span class="token operator">^</span><span class="token number">0</span>  <span class="token operator">+</span>  F<span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">1</span>  <span class="token operator">+</span>  A<span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">2</span>  <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">3</span>    <span class="token operator">=</span> <span class="token number">5</span>  <span class="token operator">+</span>  <span class="token number">15</span><span class="token operator">*</span><span class="token number">16</span>  <span class="token operator">+</span>  <span class="token number">10</span><span class="token operator">*</span><span class="token number">256</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">4096</span>    <span class="token operator">=</span> <span class="token number">5</span>  <span class="token operator">+</span>  <span class="token number">240</span>    <span class="token operator">+</span>  <span class="token number">2560</span>   <span class="token operator">+</span> <span class="token number">8192</span>    <span class="token operator">=</span> <span class="token number">10997</span></code></pre><p>&lt;10进制 —-&gt;  16进制&gt;</p><pre class=" language-c"><code class="language-c">余数定理分解ex：  <span class="token number">4877</span><span class="token number">4877</span> <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">13</span>    <span class="token number">304</span> <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token number">19</span> <span class="token operator">/</span> <span class="token number">16</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">16</span>   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    结果 <span class="token operator">=</span>  <span class="token function">130D</span>   <span class="token punctuation">(</span>注意顺序<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32-port1</title>
      <link href="/2020/08/04/stm32-port1/"/>
      <url>/2020/08/04/stm32-port1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/03/hello-world/"/>
      <url>/2020/08/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 NiuNiu 的技术经验分享博客网站<br>但凡流行的工具、技术，都是入门易，精通难，想有所成就，<br>都需要不懈的努力和漫长的积累，愿诸君与我共勉！<br>回首向来萧瑟处，归去，也无风雨也无晴<del>~</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单向不循环链表</title>
      <link href="/2020/08/02/%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/08/02/%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表：</p><p>动态的数据结构，分为数据域和指针域， 动态进行存储分配，实现数据增删</p><p>优点：</p><p>​        1、存储空间动态分配，可以根据实际需要使用</p><p>​        2、不需要地址连续的存储空间</p><p>​        3、插入/删除操作只需通过修改指针实现，不必移动数据元素， 操作时间效率高 ，插入删除事件复杂度 O(1)</p><p>缺点：</p><p>​        1、每个链节点需要设置指针域（ 存储密度小 ）</p><p>​        2、是一种非随机存储结构，查找/定位等操作都需要顺序扫描链表实现，时间效率低 O(n)</p><p>[TOC]</p><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*    头节点:数据域为空    头节点:数据域为空    malloc 申请    &lt;malloc.h>    memset 初始化  &lt;string.h>*/</span><span class="token keyword">typedef</span>  <span class="token keyword">int</span>  datatype<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> link<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    datatype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> link <span class="token operator">*</span> pNext<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Link<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 枚举   中间用,    未赋值默认第一个为0</span><span class="token keyword">enum</span> opt<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ERR<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    OK<span class="token punctuation">,</span>    TAIL<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    HEAD<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1]创建链表---即生成头节点</span>Link <span class="token operator">*</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Link <span class="token operator">*</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pHead <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    pHead<span class="token operator">=</span><span class="token punctuation">(</span>Link <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [2]插入节点---头插，尾插，中间插</span><span class="token comment" spellcheck="true">//根据位置给链表添加节点</span><span class="token comment" spellcheck="true">//参数：链表首地址，要添加的元素，和插入的位置</span><span class="token comment" spellcheck="true">//HEAD=0 TAIL=-1  其他中间</span><span class="token comment" spellcheck="true">//返回值   成功 OK 失败 ERR</span><span class="token keyword">int</span> <span class="token function">InsertLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span> datatype item<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">InsertLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span> datatype item<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pNew<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pTmp<span class="token operator">=</span>pHead<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果写pHead->pNext要判断是否为空所以为了方便写pHead</span>    pNew<span class="token operator">=</span><span class="token punctuation">(</span>Link <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pNew<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    pNew<span class="token operator">-></span>data<span class="token operator">=</span>item<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">case</span> HEAD<span class="token punctuation">:</span>        pNew<span class="token operator">-></span>pNext<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> TAIL<span class="token punctuation">:</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pTmp<span class="token operator">-></span>pNext<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pTmp<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pTmp<span class="token operator">-></span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> offset<span class="token number">-1</span> <span class="token operator">&amp;&amp;</span> pTmp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//pTmp!=NULL说明找到插入位置，如果pTmp==NULL,表示未找到要free(pNew)再返回报错</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            pTmp<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pTmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//先判断是否为空</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pNew<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pNew<span class="token operator">-></span>pNext<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        pTmp<span class="token operator">-></span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3]打印输出---遍历</span><span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pTmp<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pTmp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span>pTmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        pTmp<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [4]删除节点----头删，尾删，中间删</span><span class="token keyword">int</span> <span class="token function">DeleteLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span>datatype <span class="token operator">*</span> pData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">DeleteLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span>datatype <span class="token operator">*</span> pData<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token operator">||</span><span class="token constant">NULL</span><span class="token operator">==</span>pData<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pPre<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> HEAD<span class="token punctuation">:</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//一定要判断</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">*</span>pData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先将删除的数保存</span>        <span class="token operator">*</span>pData<span class="token operator">=</span>pDel<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TAIL<span class="token punctuation">:</span>        pPre<span class="token operator">=</span>pHead<span class="token punctuation">;</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//说明没有什么删除的，空链表是pHead->pNext为空</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>pData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>pNext<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pPre<span class="token operator">=</span>pDel<span class="token punctuation">;</span>                pDel<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//保存删除的数据v</span>             <span class="token operator">*</span>pData<span class="token operator">=</span>pDel<span class="token operator">-></span>data<span class="token punctuation">;</span>             <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>             pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//把pre变成尾节点</span>             pPre<span class="token operator">-></span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        pPre<span class="token operator">=</span>pHead<span class="token punctuation">;</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>offset<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>pDel<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            pPre<span class="token operator">=</span>pDel<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//是pPre=pDel;;</span>            pDel<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>pData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">*</span>pData<span class="token operator">=</span>pDel<span class="token operator">-></span>data<span class="token punctuation">;</span>        pPre<span class="token operator">-></span>pNext<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [5]销毁链表</span>Link <span class="token operator">*</span> <span class="token function">Destroy</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>Link <span class="token operator">*</span> <span class="token function">Destroy</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//while(pDel!=NULL)                  //while(1)是死循环  永远成立；</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到链表中的首节点</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保护好首节点后的所有节点</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放首节点</span>        <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最后再释放头节点</span>        <span class="token function">free</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        pHead<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表已删除\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pHead<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//一定要返回  pHead  否则会错误</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [6]链表逆序---拓展</span><span class="token keyword">int</span> <span class="token function">Negative</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Negative sequence  逆序</span><span class="token keyword">int</span> <span class="token function">Negative</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Negative sequence  逆序</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pA<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pB<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    pA<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//保护好头节点后的所有节点</span>    <span class="token comment" spellcheck="true">//原链表变为空链表</span>    pHead<span class="token operator">-></span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保护好首节点后的所有节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pB<span class="token operator">=</span>pA<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首节点插入到新链表</span>        pA<span class="token operator">-></span>pNext<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pA<span class="token punctuation">;</span>        pA<span class="token operator">=</span>pB<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pA<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>int main()</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
