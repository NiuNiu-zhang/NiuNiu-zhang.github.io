<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进制间转换</title>
      <link href="/2020/08/04/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/08/04/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>&lt;10进制—&gt;2进制&gt;</p><pre class=" language-c"><code class="language-c">ex<span class="token punctuation">:</span>  <span class="token number">19</span><span class="token operator">--</span><span class="token operator">-></span>     <span class="token number">19</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    反序取余数   <span class="token number">10011</span></code></pre><p><img src="/images/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.jpg"></p><p><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\进制转换.jpg"></p><p>10进制中的 小数部分–&gt;2进制</p><pre class=" language-c"><code class="language-c">ex<span class="token punctuation">:</span> <span class="token number">0.75</span>小数不断×<span class="token number">2</span>取整，直到没有小数为止，注意<span class="token punctuation">:</span>不是所有的小数都可以转为 <span class="token number">2</span> 进制    <span class="token number">0.75</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.5</span> 取整 <span class="token number">1</span>    <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span>  顺序取数得<span class="token punctuation">:</span>  <span class="token number">0.11</span></code></pre><p>&lt;16进制—-&gt; 10进制 &gt;</p><pre class=" language-c"><code class="language-c"><span class="token number">16</span>进制 是 <span class="token number">16</span> 进 <span class="token number">1</span>   <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> B C D E <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>ex<span class="token punctuation">:</span> 2AF5    <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span> <span class="token number">16</span><span class="token operator">^</span><span class="token number">0</span>  <span class="token operator">+</span>  F<span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">1</span>  <span class="token operator">+</span>  A<span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">2</span>  <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">^</span><span class="token number">3</span>    <span class="token operator">=</span> <span class="token number">5</span>  <span class="token operator">+</span>  <span class="token number">15</span><span class="token operator">*</span><span class="token number">16</span>  <span class="token operator">+</span>  <span class="token number">10</span><span class="token operator">*</span><span class="token number">256</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">4096</span>    <span class="token operator">=</span> <span class="token number">5</span>  <span class="token operator">+</span>  <span class="token number">240</span>    <span class="token operator">+</span>  <span class="token number">2560</span>   <span class="token operator">+</span> <span class="token number">8192</span>    <span class="token operator">=</span> <span class="token number">10997</span></code></pre><p>&lt;10进制 —-&gt;  16进制&gt;</p><pre class=" language-c"><code class="language-c">余数定理分解ex：  <span class="token number">4877</span><span class="token number">4877</span> <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">13</span>    <span class="token number">304</span> <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token number">19</span> <span class="token operator">/</span> <span class="token number">16</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">16</span>   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span>    结果 <span class="token operator">=</span>  <span class="token function">130D</span>   <span class="token punctuation">(</span>注意顺序<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32-port1</title>
      <link href="/2020/08/04/stm32-port1/"/>
      <url>/2020/08/04/stm32-port1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/03/hello-world/"/>
      <url>/2020/08/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>{return 0;}</p><p><code>&#123;return 0;&#125;</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" hello world \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单向不循环链表</title>
      <link href="/2020/08/02/%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/08/02/%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表：</p><p>动态的数据结构，分为数据域和指针域， 动态进行存储分配，实现数据增删</p><p>优点：</p><p>​        1、存储空间动态分配，可以根据实际需要使用</p><p>​        2、不需要地址连续的存储空间</p><p>​        3、插入/删除操作只需通过修改指针实现，不必移动数据元素， 操作时间效率高 ，插入删除事件复杂度 O(1)</p><p>缺点：</p><p>​        1、每个链节点需要设置指针域（ 存储密度小 ）</p><p>​        2、是一种非随机存储结构，查找/定位等操作都需要顺序扫描链表实现，时间效率低 O(n)</p><p>[TOC]</p><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*    头节点:数据域为空    头节点:数据域为空    malloc 申请    &lt;malloc.h>    memset 初始化  &lt;string.h>*/</span><span class="token keyword">typedef</span>  <span class="token keyword">int</span>  datatype<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> link<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    datatype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> link <span class="token operator">*</span> pNext<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Link<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 枚举   中间用,    未赋值默认第一个为0</span><span class="token keyword">enum</span> opt<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ERR<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    OK<span class="token punctuation">,</span>    TAIL<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    HEAD<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1]创建链表---即生成头节点</span>Link <span class="token operator">*</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Link <span class="token operator">*</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pHead <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    pHead<span class="token operator">=</span><span class="token punctuation">(</span>Link <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [2]插入节点---头插，尾插，中间插</span><span class="token comment" spellcheck="true">//根据位置给链表添加节点</span><span class="token comment" spellcheck="true">//参数：链表首地址，要添加的元素，和插入的位置</span><span class="token comment" spellcheck="true">//HEAD=0 TAIL=-1  其他中间</span><span class="token comment" spellcheck="true">//返回值   成功 OK 失败 ERR</span><span class="token keyword">int</span> <span class="token function">InsertLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span> datatype item<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">InsertLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span> datatype item<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pNew<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pTmp<span class="token operator">=</span>pHead<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果写pHead->pNext要判断是否为空所以为了方便写pHead</span>    pNew<span class="token operator">=</span><span class="token punctuation">(</span>Link <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pNew<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    pNew<span class="token operator">-></span>data<span class="token operator">=</span>item<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">case</span> HEAD<span class="token punctuation">:</span>        pNew<span class="token operator">-></span>pNext<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> TAIL<span class="token punctuation">:</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pTmp<span class="token operator">-></span>pNext<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pTmp<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pTmp<span class="token operator">-></span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> offset<span class="token number">-1</span> <span class="token operator">&amp;&amp;</span> pTmp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//pTmp!=NULL说明找到插入位置，如果pTmp==NULL,表示未找到要free(pNew)再返回报错</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            pTmp<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pTmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//先判断是否为空</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pNew<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pNew<span class="token operator">-></span>pNext<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        pTmp<span class="token operator">-></span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3]打印输出---遍历</span><span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pTmp<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pTmp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span>pTmp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        pTmp<span class="token operator">=</span>pTmp<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [4]删除节点----头删，尾删，中间删</span><span class="token keyword">int</span> <span class="token function">DeleteLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span>datatype <span class="token operator">*</span> pData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">DeleteLink</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span>datatype <span class="token operator">*</span> pData<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token operator">||</span><span class="token constant">NULL</span><span class="token operator">==</span>pData<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pPre<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> HEAD<span class="token punctuation">:</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//一定要判断</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">*</span>pData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先将删除的数保存</span>        <span class="token operator">*</span>pData<span class="token operator">=</span>pDel<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TAIL<span class="token punctuation">:</span>        pPre<span class="token operator">=</span>pHead<span class="token punctuation">;</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//说明没有什么删除的，空链表是pHead->pNext为空</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>pData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>pNext<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pPre<span class="token operator">=</span>pDel<span class="token punctuation">;</span>                pDel<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//保存删除的数据v</span>             <span class="token operator">*</span>pData<span class="token operator">=</span>pDel<span class="token operator">-></span>data<span class="token punctuation">;</span>             <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>             pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//把pre变成尾节点</span>             pPre<span class="token operator">-></span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        pPre<span class="token operator">=</span>pHead<span class="token punctuation">;</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>offset<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>pDel<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            pPre<span class="token operator">=</span>pDel<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//是pPre=pDel;;</span>            pDel<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>pData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">*</span>pData<span class="token operator">=</span>pDel<span class="token operator">-></span>data<span class="token punctuation">;</span>        pPre<span class="token operator">-></span>pNext<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [5]销毁链表</span>Link <span class="token operator">*</span> <span class="token function">Destroy</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>Link <span class="token operator">*</span> <span class="token function">Destroy</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//while(pDel!=NULL)                  //while(1)是死循环  永远成立；</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到链表中的首节点</span>        pDel<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pDel<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保护好首节点后的所有节点</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pDel<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放首节点</span>        <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDel<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最后再释放头节点</span>        <span class="token function">free</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        pHead<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表已删除\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pHead<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//一定要返回  pHead  否则会错误</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [6]链表逆序---拓展</span><span class="token keyword">int</span> <span class="token function">Negative</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Negative sequence  逆序</span><span class="token keyword">int</span> <span class="token function">Negative</span><span class="token punctuation">(</span>Link <span class="token operator">*</span> pHead<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Negative sequence  逆序</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pA<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Link <span class="token operator">*</span> pB<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    pA<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//保护好头节点后的所有节点</span>    <span class="token comment" spellcheck="true">//原链表变为空链表</span>    pHead<span class="token operator">-></span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保护好首节点后的所有节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pB<span class="token operator">=</span>pA<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首节点插入到新链表</span>        pA<span class="token operator">-></span>pNext<span class="token operator">=</span>pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        pHead<span class="token operator">-></span>pNext<span class="token operator">=</span>pA<span class="token punctuation">;</span>        pA<span class="token operator">=</span>pB<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pA<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>int main()</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
