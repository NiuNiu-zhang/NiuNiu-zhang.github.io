<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Boa服务器和cgi</title>
      <link href="/2020/08/12/Boa%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ccgi/"/>
      <url>/2020/08/12/Boa%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ccgi/</url>
      
        <content type="html"><![CDATA[<p>描述：<br>boa是基于 http 的单任务小型服务器    大小只有 60KB 左右<br>只能依次 完成用户的请求， 而不会 fork 出新的进程 来处理并发连接请求</p><p>CGI 只是一个进程，用来 提供接口 –&gt;自动目录生成 和 自动文件进行拼接<br>可靠性，可移植性<br><img src="/images/boa%E5%8E%9F%E7%90%86.png"></p><p>服务器模型<br>C-S<br>client：张三-  id1，李四- id2<br>server：腾讯<br>1、先登录 输入账号密码 发送服务器验证<br>2、向 李四 发送消息<br>封装信息包<br>&lt;id1  数据  id2&gt;<br>3、服务器 先查找是否有  李四<br>然后把 数据包发给 李四<br>4、李四发给张三<br>&lt;id2 数据  id1&gt;</p><h6 id="类比-：-lt-boa-服务器的作用-gt"><a href="#类比-：-lt-boa-服务器的作用-gt" class="headerlink" title="类比 ： &lt;boa 服务器的作用&gt;"></a>类比 ： &lt;boa 服务器的作用&gt;</h6><p>CGI—  相当于 客户端1<br>Web—相当于 客户端2<br>①查找    CGI 查找 Web<br>②把 CGI 数据提取出来—&gt;交给对应的网页—&gt;显示</p><p>boa.conf  保存的配置信息是从哪里查找到 哪里显示<br>&lt;cgi.bin&gt;   <www><br>查找：写入配置文件  boa.conf<br>从 boa.bin 查找</www></p><p>关闭 boa 服务器<br>先查找 进程号  ps -axj  | grep “boa”<br>kill -9  pid号<br>注意：<br>boa 模块在  该项目上层应用中 是基石组成</p><h5 id="boa环境搭建和测试"><a href="#boa环境搭建和测试" class="headerlink" title="boa环境搭建和测试"></a>boa环境搭建和测试</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;源码下载&gt;http:<span class="comment">//www.boa.org/   （项目版本 0.94.13）  boa-0.94.13.tar.gz</span></span><br><span class="line"><span class="symbol">cd</span> 到对应目录  解压       tar xzf boa-<span class="number">0</span>.<span class="number">94</span>.<span class="number">13</span>.tar.gz</span><br><span class="line">安装需要的工具  bison    flex</span><br><span class="line">        sudo apt-<span class="meta">get</span> update</span><br><span class="line">        sudo apt-<span class="meta">get</span> install bison flex</span><br><span class="line"> 生成 Makefile 文件</span><br><span class="line"> cd  boa-<span class="number">0</span>.<span class="number">94</span>.<span class="number">13</span>/src</span><br><span class="line"> 执行  ./configure</span><br><span class="line"> 准备工作</span><br><span class="line"> Boa 需要在 /etc 目录下建立一个  boa 目录   </span><br><span class="line">     里面存放 Boa 的主要配置文件  boa.conf  </span><br><span class="line">    新建目录 sudo mkdir /etc/boa     《在家目录下 /home/linux》</span><br><span class="line">    　　cd ~ 返回根目录</span><br><span class="line">　　    cd /etc 切换当前目录</span><br><span class="line">      sudo <span class="meta">cp</span> ~/Desktop/boa-<span class="number">0</span>.<span class="number">94</span>.<span class="number">13</span>/boa.conf boa    《复制文件boa.conf到/etc/boa目录》</span><br><span class="line">      修改  boa.conf 配置文件  《管理员身份》 sudo gedit ~/etc/boa/boa.conf </span><br><span class="line">      </span><br><span class="line">      (<span class="number">1</span>)Group的修改</span><br><span class="line">　　修改 Group nogroup</span><br><span class="line">　　为 　Group <span class="number">0</span></span><br><span class="line">　　(<span class="number">2</span>)user的修改</span><br><span class="line">　　修改 User nobody</span><br><span class="line">　　为 　User <span class="number">0</span></span><br><span class="line">　　(<span class="number">3</span>)修改ScriptAlias的路径</span><br><span class="line">　　修改ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/</span><br><span class="line">　　为 ScriptAlias /cgi-bin/ /var/www/cgi-bin/</span><br><span class="line">　　(<span class="number">4</span>)去掉ServerName前面的注释符号#</span><br><span class="line">　　修改<span class="symbol">#ServerName</span> www.your.org.here</span><br><span class="line">　　为 ServerName www.your.org.here</span><br><span class="line">　　否则会出现错误: <span class="string">&quot;gethostbyname::No such file or directory&quot;</span></span><br><span class="line">　　(<span class="number">5</span>)注释掉AccessLog命令</span><br><span class="line">　　修改AccessLog /var/log/boa/access_log</span><br><span class="line">　　为# AccessLog /var/log/boa/access_log</span><br><span class="line">　　否则会出现错误提示: <span class="string">&quot;Cannot open ... for logging:logfile open:Is a directory&quot;</span></span><br><span class="line">  </span><br><span class="line">  &lt;修改 src/compat.h&gt;</span><br><span class="line">  <span class="comment">#define TIMEZONE_OFFSET(foo) foo##-&gt;tm_gmtoff</span></span><br><span class="line">　修改成</span><br><span class="line">　<span class="symbol">#define</span> TIMEZONE_OFFSET(foo) (foo)-&gt;tm_gmtoff</span><br><span class="line">　否则会出现错误：util.c:<span class="number">100</span>:<span class="number">1</span>: error: pasting <span class="string">&quot;t&quot;</span> <span class="keyword">and</span> <span class="string">&quot;-&gt;&quot;</span> does not give a valid preprocessing token make: *** [util.o] 错误 <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  &lt;修改 src/log.c&gt;</span><br><span class="line">  <span class="meta">if</span> (dup2(error_log, STDERR_FILENO) == -<span class="number">1</span>) &#123;</span><br><span class="line">　　DIE(<span class="string">&quot;unable to dup2 the error log&quot;</span>)<span class="comment">;</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　修改为</span><br><span class="line">　　<span class="comment">/*if (dup2(error_log, STDERR_FILENO) == -1) &#123;</span></span><br><span class="line"><span class="comment">　　DIE(&quot;unable to dup2 the error log&quot;);</span></span><br><span class="line"><span class="comment">　　&#125;*/</span></span><br><span class="line">　　否则会出现错误：log.c:<span class="number">73</span> unable to dup2 the error log:bad file descriptor</span><br><span class="line">  </span><br><span class="line">  &lt;修改 src/boa.c&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">if</span> (setuid(<span class="number">0</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">　　DIE(”icky Linux kernel bug!”)<span class="comment">;</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　修改为</span><br><span class="line">　　<span class="symbol">#if</span> <span class="number">0</span></span><br><span class="line">　　<span class="meta">if</span> (setuid(<span class="number">0</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">　　DIE(”icky Linux kernel bug!”)<span class="comment">;</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="symbol">#endif</span></span><br><span class="line">　　否则可能会出现错误：boa.c:<span class="number">228</span> 、 boa.c:<span class="number">226</span></span><br></pre></td></tr></table></figure><p>boa 目录搭建完成之后<br>开始进行  web 服务器的文件根目录创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">返回根目录  cd ~</span><br><span class="line">　sudo mkdir /var/www 创建目录</span><br><span class="line">　　sudo chmod -R <span class="number">777</span> /var/www 修改权限</span><br><span class="line">  【创建<span class="built_in">log</span>目录】</span><br><span class="line">         sudo mkdir /var/<span class="built_in">log</span>/boa</span><br><span class="line">　　sudo mkdir /var/<span class="built_in">log</span>/boa/error_log</span><br><span class="line">　　sudo mkdir /var/<span class="built_in">log</span>/boa/access_log</span><br><span class="line">　　sudo chmod -R <span class="number">777</span> /var/<span class="built_in">log</span>/boa 修改权限</span><br><span class="line">　　sudo chmod -R <span class="number">777</span> /var/<span class="built_in">log</span>/boa/error_log 修改权限</span><br><span class="line">　　sudo chmod -R <span class="number">777</span> /var/<span class="built_in">log</span>/boa/access_log 修改权限</span><br><span class="line">  【创建 cgi 目录·】</span><br><span class="line">         sudo mkdir /var/www/cgi-bin 创建cgi文件存放目录</span><br><span class="line">　　sudo chmod -R <span class="number">777</span> /var/www/cgi-bin 修改权限</span><br><span class="line">  </span><br><span class="line">  在 src 目录下 编译</span><br><span class="line">  　 cd ~ 返回根目录</span><br><span class="line">　　cd Destop/boa<span class="number">-0.94</span><span class="number">.13</span>/src 切换目录</span><br><span class="line">　　make 编译</span><br><span class="line">  在 src 目录下 运行boa</span><br><span class="line">      sudo ./boa 必须在src目录下运行</span><br><span class="line">    查看进程</span><br><span class="line">    ps -e 看boa是否已经运行</span><br><span class="line">    网页测试</span><br><span class="line">    浏览器访问：http:<span class="comment">//127.0.0.1</span></span><br><span class="line">    　　注意：默认端口是<span class="number">80</span>，如果你的<span class="number">80</span>端口已经被占用，可以修改/etc/boa/boa.conf，变更Port <span class="number">80</span>。这里对应修改：http:<span class="comment">//127.0.0.1:端口号</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">【cgi 程序测试】</span><br><span class="line">　　将Destop/boa<span class="number">-0.94</span><span class="number">.13</span>/examples目录下的cgi-test.cgi拷贝到var/www/cgi-bin</span><br><span class="line">　　浏览器访问：http:<span class="comment">//127.0.0.1/cgi-bin/cgi-test.cgi</span></span><br><span class="line">（现在你可以删掉boa<span class="number">-0.94</span><span class="number">.13</span>.tar.gz，然后把解压后的目录boa<span class="number">-0.94</span><span class="number">.13</span>放到你自己想放的地方，但是每次运行boa自己要容易找到位置。）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/cgi-test.png"></p><p>cgi:<br> &lt;CGI—又叫  通用网关接口 &gt;<br>是 Web 服务器运行时外部程序的规范，按 CGI 编写的程序可以拓展服务器功能<br>CGI 应用程序能与浏览器进行交互，还可通过数据API与数据库服务器等外部数据源进行通信，<br>从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，<br>也可以将从浏览器获得的数据放到数据库中。</p><p><strong>A-9 —&gt;CGI—&gt;BOA—&gt;HTML<br>网页发控制表单—–&gt;CGI—&gt;相应的cgi进程控制硬件</strong></p><p>c 和 HTML 语言有一个交互<br>这是c与cgi的数据交互： .c–&gt;,cgi<br>其实  cgi 就是app<br>只是cgi提供了 c 和 html 的超文本协议的交互</p><p>CGI程序的工作一般流程就是   ①<br>接收表单数据<br>进行数据处理，最后根据处理结果生成新的页面   返回给浏览器</p><pre><code>表单一般用  POST 方法提交给服务器，由CGI程序获得    程序根据 元素名字/值 中的元素名字来区分数据，    完成数据处理后，再读取相应的模板文件，        根据注释标记和对应的数据填充到 HTML 文本中，生成最后页面返回给浏览器</code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> boa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识JSON</title>
      <link href="/2020/08/12/%E5%88%9D%E8%AF%86JSON/"/>
      <url>/2020/08/12/%E5%88%9D%E8%AF%86JSON/</url>
      
        <content type="html"><![CDATA[<p>JSON:指的是  javaScript 对象表示法，一种基于文本，独立于语言的轻量级数据交换格式<br>JSON是存储和交换文本信息的语法， 类似 XML，但比  XML 更小、更快、更易解析<br>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">JSON 对象在 大括号 &#123;&#125;中书写， 对象可以包含多个 名称/值对</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;goole&quot;</span>,  <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.goole1.com&quot;</span>&#125;</span><br><span class="line">JSON 数组在中括号 [] 中书写，数组可包含多个对象</span><br><span class="line">[</span><br><span class="line">&#123;<span class="string">&quot;城市&quot;</span>:<span class="string">&quot;福州&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;城市&quot;</span>:<span class="string">&quot;厦门&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;城市&quot;</span>:<span class="string">&quot;平潭&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">JSON 的布尔值 可以是 <span class="literal">true</span> 或者 <span class="literal">false</span>， json 可以设置 null 值</span><br><span class="line">&#123;<span class="string">&quot;flag&quot;</span>:<span class="literal">true</span>&#125;             &#123;<span class="string">&quot;属性&quot;</span>:null&#125;</span><br><span class="line"></span><br><span class="line">JSON 对象使用在大括号(&#123;&#125;)中书写。</span><br><span class="line">对象可以包含多个 key/value（键/值）对。</span><br><span class="line">key必须是字符串，value可以是合法的JSON数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</span><br><span class="line">key 和 value 中使用冒号(:)分割。</span><br><span class="line">每个 key/value 对使用逗号(,)分割。</span><br><span class="line">```c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">环境配置：</span><br><span class="line"><span class="comment">// 由于C语言本身不支持JSON数据，所以我们可以通过cJSON使得C语言支持JSON格式的数据。</span></span><br><span class="line">cJSON作为Json格式的解析库，其主要功能是构建和解析Json报文，</span><br><span class="line"></span><br><span class="line">``` c</span><br><span class="line">cJSON结构体</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> &#123;</span>  </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">next</span>,*<span class="title">prev</span>;</span>   </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">child</span>;</span>   </span><br><span class="line"> <span class="keyword">int</span> type;   </span><br><span class="line"> <span class="keyword">char</span> *valuestring;   </span><br><span class="line"> <span class="keyword">int</span> valueint;  </span><br><span class="line"> <span class="keyword">double</span> valuedouble;   </span><br><span class="line"> <span class="keyword">char</span> *<span class="built_in">string</span>;   </span><br><span class="line">&#125; cJSON; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.cJSON存储的时候是采用链表存储的，其访问方式很像一颗树。每一个节点可以有兄妹节点，<br>通过next/prev指针来查找，它类似双向链表；每个节点也可以有孩子节点，通过child指针来访问，进入下一层。<br>不过，只有节点是对象或数组才可以有孩子节点。<br>2.type一共有7种取值，分别是：<br>#define cJSON_False 0<br>#define cJSON_True 1<br>#define cJSON_NULL 2<br>#define cJSON_Number 3<br>#define cJSON_String 4<br>#define cJSON_Array 5<br>#define cJSON_Object 6</p><p>3、string中存放的是这个节点的名字。</p><p>cJSON 库的使用<br>下载    <a href="http://sourceforge.net/projects/cjson/">http://sourceforge.net/projects/cjson/</a></p><p>cJSON，目前来说，就只有两个文件，一个cJSON.c 一个cJSON.h文件。<br>用法：只需在函数中includecJSON.h头文件，然后和cJSON.c或库文件libcJSON.a一起编译即可使用。<br>在linux上，使用命令进行编译：<br><strong>gcc cJSON.c test.c -o test -lm</strong></p><p>使用的时候需要链接  库   -lm</p><p>重要函数说明：<br>1、  创建<br>创建 JSON 对象：  cJSON  *  cJSON_CreateObject( void );<br>创建     JSON 数组:   cJSON  *  cJSON_CreateArray( void );<br>2、添加<br>【向对象中添加】void  cJSON_AddItemToObject(cJSON * object, const char * string, cJSON * item );<br>【向数组中添加】void cJSON_AddItemToArray( cJSON * array,  cJSON * item );</p><p>【向对象中增加数字】cJSON_AddItemToObject(root, “value”, cJSON_CreateNumber(value));<br>【向对象中增加文件】cJSON_AddItemToObject(root, “string”, cJSON_CreateString(string));</p><p>demo:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cJSON.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个数组，并向数组添加 一个字符串 和一个数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_js</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON *root = <span class="literal">NULL</span>;</span><br><span class="line">    root = cJSON_CreateArray();</span><br><span class="line">    cJSON_AddItemToArray(root, cJSON_CreateString(<span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line">    cJSON_AddItemToArray(root, cJSON_CreateNumber(<span class="number">2019</span>));</span><br><span class="line">    <span class="comment">//char *s = cJSON_PrintUnformatted(root);</span></span><br><span class="line">    <span class="keyword">char</span> *s = cJSON_Print(root);</span><br><span class="line">    <span class="keyword">if</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %s \n&quot;</span>,s);</span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">        cJSON_Delete(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">                                                                         </span><br><span class="line"><span class="comment">//创建一个对象，并向这个对象里添加字符串和整形键值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON * usr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//创建根数据对象</span></span><br><span class="line">    usr = cJSON_CreateObject();</span><br><span class="line">    <span class="comment">// 加入键值，加 字符串</span></span><br><span class="line">    cJSON_AddStringToObject(usr,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;jack-hui&quot;</span>);</span><br><span class="line">    cJSON_AddStringToObject(usr,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">    cJSON_AddStringToObject(usr,<span class="string">&quot;job&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="comment">// 加入整数</span></span><br><span class="line">    cJSON_AddNumberToObject(usr,<span class="string">&quot;num&quot;</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 json 形式 打印成正常的 字符串形式</span></span><br><span class="line">    <span class="keyword">char</span> * out = cJSON_Print( usr );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, out );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    cJSON_Delete( usr );</span><br><span class="line">    <span class="built_in">free</span>( out );</span><br><span class="line"></span><br><span class="line">    create_js();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/cjson-out.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_js</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON *root = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON *js_body = <span class="literal">NULL</span>;</span><br><span class="line">    cJSON *js_list = <span class="literal">NULL</span>;</span><br><span class="line">    root = cJSON_CreateObject();</span><br><span class="line">    cJSON_AddItemToObject(root,<span class="string">&quot;最外层&quot;</span>,js_body = cJSON_CreateObject());</span><br><span class="line">    cJSON_AddItemToObject(js_body,<span class="string">&quot;Rule&quot;</span>,js_list = cJSON_CreateObject());</span><br><span class="line">    cJSON_AddStringToObject(js_list,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">    cJSON_AddStringToObject(js_body,<span class="string">&quot;enable&quot;</span>,<span class="string">&quot;true,false&quot;</span>);</span><br><span class="line">    cJSON_AddNumberToObject(js_list,<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *s = cJSON_Print(root);</span><br><span class="line">    <span class="comment">//char *s = cJSON_PrintUnformatted(root);</span></span><br><span class="line">    <span class="keyword">if</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %s \n&quot;</span>,s);</span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">        cJSON_Delete(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    create_js();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/out2_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>json报文解析</title>
      <link href="/2020/08/12/json%E6%8A%A5%E6%96%87%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/08/12/json%E6%8A%A5%E6%96%87%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>json：通常用于与 服务端交换数据，接收服务器数据时一般是字符串</p><p>解析 json 字符串：<br>1、<strong>cJSON_Parse()</strong> 函数<br>&ensp;  &ensp;  负责解析 json 数据包，并按照 cJSON 结构体的结构序列化整个数据包，使用该函数会通过 malloc 在内存中开辟空间，使用完需要手动释放<br>2、<strong>cJSON_GetObjectItem()</strong> 函数<br>可以从 cJSON 结构体中查找某个子节点名称（键名称），如果查找成功，可把该子节点序列化到 cJSON 结构体中</p><p>3、如果需要使用cJSON结构体内容，通过cJSON结构体中的 valueint 和 valuestring 取出有价值的内容<br>4、cJSON_Delete  释放内存空间</p><p>序列化：Serialization<br>是将对象的状态信息  转换为可以存储或传输形式的过程<br>在序列化期间，兑奖将其当前状态写入到临时或持久性存储区，以后可以通过从存储区中读取或反序列化对象的状态，重新创建该对象</p><p>demo:</p><h5 id="创建-json-从-json-中获取数据"><a href="#创建-json-从-json-中获取数据" class="headerlink" title="创建 json, 从 json 中获取数据"></a>创建 json, 从 json 中获取数据</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cJSON.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">makejson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON * pJsonRoot = <span class="literal">NULL</span>;  <span class="comment">//定义根节点</span></span><br><span class="line">    pJsonRoot = cJSON_CreateObject();</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pJsonRoot)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;create object error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cJSON_AddStringToObject( pJsonRoot,<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    cJSON_AddNumberToObject( pJsonRoot,<span class="string">&quot;number&quot;</span>, <span class="number">10010</span>);</span><br><span class="line">    cJSON_AddBoolToObject( pJsonRoot,<span class="string">&quot;bool&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    cJSON * pSubJson = <span class="literal">NULL</span>;</span><br><span class="line">    pSubJson = cJSON_CreateObject();</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pSubJson )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 删除掉原来的 root</span></span><br><span class="line">    cJSON_Delete( pJsonRoot );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cJSON_AddStringToObject( pSubJson, <span class="string">&quot;subjsonobj&quot;</span>,<span class="string">&quot;a sub json string&quot;</span>);</span><br><span class="line">    cJSON_AddItemToObject( pJsonRoot, <span class="string">&quot;subobj&quot;</span>,  pSubJson );  <span class="comment">//往root 里加入 pSubJson</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> * p = cJSON_Print( pJsonRoot );   <span class="comment">//将 json 形式打印成正常的字符串 格式</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        cJSON_Delete( pJsonRoot );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cJSON_Delete( pJsonRoot );</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parseJson</span><span class="params">( <span class="keyword">char</span> * pMsg )</span>  <span class="comment">//parse:分析，描述</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pMsg)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;param error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cJSON * pJson = cJSON_Parse( pMsg);   <span class="comment">//parse  解析接口,解析之后是cJSON * 格式</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pJson )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;parse error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get string from  json</span></span><br><span class="line">    cJSON * pString = cJSON_GetObjectItem(pJson, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pString )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;get string error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;obj_1:%s\r\n&quot;</span>,pString-&gt;valuestring);</span><br><span class="line"></span><br><span class="line">    cJSON * pNum = cJSON_GetObjectItem(pJson, <span class="string">&quot;number&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNum)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;get num error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;obj_2:%d\r\n&quot;</span>,pNum-&gt;valueint);</span><br><span class="line"></span><br><span class="line">    cJSON * pBool = cJSON_GetObjectItem( pJson, <span class="string">&quot;bool&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pBool)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;get bool error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;obj_3:%d\r\n&quot;</span>,pBool-&gt;valueint);</span><br><span class="line"></span><br><span class="line">    cJSON * pSub = cJSON_GetObjectItem( pJson,<span class="string">&quot;subobj&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pSub)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;get sub error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cJSON * pSubSub = cJSON_GetObjectItem( pSub,<span class="string">&quot;subjsonobj&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>( <span class="literal">NULL</span>== pSubSub)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;get subsub error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sub_obj_sub:%s\r\n&quot;</span>,pSubSub-&gt;valuestring);</span><br><span class="line">    cJSON_Delete( pJson);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * p = makejson();</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == p)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot; makejson error!\r\n &quot;</span> );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, p);</span><br><span class="line">    parseJson(p);</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">//千万不要忘记释放内存呀，cJSON_Print()函数或者cJSON_PrintUnformatted（）产生的内存，使用free(char *)进行释放</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行：<br><img src="/images/parsejson.png"></p><h5 id="创建-jsonArray-，从json数组中解析数据"><a href="#创建-jsonArray-，从json数组中解析数据" class="headerlink" title="创建 jsonArray ，从json数组中解析数据"></a>创建 jsonArray ，从json数组中解析数据</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cJSON.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数组，数组值是另一个JSON的item，这里使用数字作为演示</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *  <span class="title">makeArray</span><span class="params">(  <span class="keyword">int</span> size )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON * root = cJSON_CreateArray();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;create json array faild\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cJSON_AddNumberToObject(root, <span class="string">&quot;heh&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> * out = cJSON_Print(root);</span><br><span class="line">    cJSON_Delete(root);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析创建好的 cJSON 数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parseArray</span><span class="params">(  <span class="keyword">char</span> * pJson)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pJson )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;param error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cJSON  * root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == (root = cJSON_Parse(pJson)) )  <span class="comment">//解析创建好的</span></span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;parseArray error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> size = cJSON_GetArraySize( root );  <span class="comment">// cJSON_GetArraySize</span></span><br><span class="line">    <span class="keyword">int</span> icnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (icnt=<span class="number">0</span>; icnt&lt;size; icnt ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cJSON * pSub = cJSON_GetArrayItem( root, icnt );  <span class="comment">//cJSON_GetArrayItem</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="literal">NULL</span> == pSub )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;   <span class="comment">//退出本次循环，执行下一次循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = pSub-&gt;valueint;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;value[%2d]:[%d]\r\n&quot;</span>,icnt, value );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cJSON_Delete(  root );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * json = makeArray(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == json)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;makeArray error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, json);</span><br><span class="line">    parseArray(json);</span><br><span class="line">    <span class="built_in">free</span>(json);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><img src="/images/parsejsonArray.png"></p>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别技术栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程间通信-管道</title>
      <link href="/2020/08/10/%E7%AE%A1%E9%81%93/"/>
      <url>/2020/08/10/%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>Linux 进程间通讯 ：<br>1、无名管道<br>2、有名管道<br>3、信号<br>4、消息队列<br>5、共享内存<br>6、信号量<br>7、套接字</p><p>什么是管道？<br> &ensp;   &ensp;   &ensp;  管道是一个进程连接数据流到另一个进程的通道，通常的作用是把一个进程的输出通过管道连接到另一个进程的输入<br>分为：有名管道  <strong>pipe</strong>     和  无名管道   <strong>fifo</strong></p><p>管道操作：<br> &ensp;   &ensp;   &ensp; 一个进程往管道中写入数据，另一个进程从管道中读出数据</p><h2 id="有名管道"><a href="#有名管道" class="headerlink" title="有名管道"></a>有名管道</h2><p>特点：<br>①先进先出，对管道及 FIFO 的读总是从开始处返回数据，对它们的写则把数据添加到末尾， 有名管道不支持  如 lseek() 等文件定位操作。<br>②又称为  FIFO 文件，有名管道一旦创建完成后，linux会创建一个文件，对文件进行读写，就实现进程间的  数据通信 了。<br>③可以使   互不相关的 两个进程实现彼此通信<br>注意：<br>FIFO 文件只能以 <em>RDONLY</em> 的方式读取打开  或者 <em>WRONLY</em> 的方式写打开<br>FIFO 中的内容被读取后，<strong>就消失了</strong>，但是普通文件内容读取后不会消失<br>对有名管道的操作可以用常规的  文件 IO</p><p>操作：<br>1—-&gt; 创建有名管道</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span>   <span class="comment">//mknod</span></span></span><br><span class="line"><span class="function">  <span class="comment">//pathname:要创建的FIFO文件名(带路径)</span></span></span><br><span class="line"><span class="function">  <span class="comment">//mode :创建的文件的权限   0777 可读可写可执行    0666 读写</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  <span class="comment">//EEXIST  代表文件已经存在的错误码</span></span></span><br><span class="line"><span class="function">  demo</span></span><br><span class="line"><span class="function">      <span class="title">if</span> <span class="params">(  ( mkfifo( MYFIFO, O_CREAT  | O_EXCL) &lt; <span class="number">0</span> )  &amp;&amp; ( errno != EEXIST )<span class="comment">/* or  mknod*/</span> )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;create fifo error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> errno;   <span class="comment">//返回错误码</span></span><br><span class="line">        </span><br><span class="line">EAGAIN  宏</span><br><span class="line">从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。例如，以 O_NONBLOCK的标志打开文件/socket/FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。</span><br><span class="line">demo</span><br><span class="line">    <span class="keyword">if</span> (  <span class="number">-1</span> == (real_read = read(fd, read_buffer, UNIT_SIZE )))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EAGAIN )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;No data yet\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>return: success:  FIFO的文件描述符         error:  -1<br>2—-&gt; 删除有名管道</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname)</span> </span></span><br><span class="line"> return:    success:0            error:   -1</span><br></pre></td></tr></table></figure><p>3—-&gt; 示例<br>使用一个存在的有名管道之前，需要用open（）将其打开。因为有名管道是一个存在于硬盘上的文件，而管道是存在于内存中的特殊文件。<br>以下程序演示有名管道在无亲缘关系的进程之间如何通信。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">char</span> * p =<span class="string">&quot;weiqi7777 world\r\n&quot;</span>;</span><br><span class="line">    mkfifo(<span class="string">&quot;fifo.txt&quot;</span>,  <span class="number">0777</span>);</span><br><span class="line">    fd = open(<span class="string">&quot;fifo.txt&quot;</span>,  O_WRONLY);</span><br><span class="line">    <span class="comment">//写</span></span><br><span class="line">    write(fd,p, <span class="built_in">strlen</span>(p)+<span class="number">1</span>);  <span class="comment">//strlen的话不计算  \n， sizeof计算</span></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：有名管道必须用于两进程，一写一读，只写不读会卡在那里，阻塞<br>demo：<br>write.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有名管道 fifo 的写端代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">&quot;myfifo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE  1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">char</span>  buf[BUF_SIZE] = <span class="string">&quot;Hello procwrite, I come from process named procread!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为不知道 谁会操作，修改权限掩码</span></span><br><span class="line">    umask( <span class="number">0</span> );</span><br><span class="line">    <span class="comment">//指明创建一个有名管道且存取权限为0666，即创建者、与创建者同组的用户、其他用户对该有名管道的访问权限都是可读可写</span></span><br><span class="line">    <span class="keyword">if</span> ( mkfifo( FIFO_NAME, <span class="number">0666</span>)  == <span class="number">-1</span> )  <span class="comment">//mknod</span></span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkfifo  error\r\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  <span class="comment">// 0是正常，其他异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">-1</span> == ( fd = open(FIFO_NAME, O_WRONLY ) ))  <span class="comment">//以写方式打开管道</span></span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fopen error!\r\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    write( fd, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span> );  <span class="comment">//向 fifo 写数据</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>read.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有名管道的 读端 代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME   <span class="meta-string">&quot;myfifo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE    1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">char</span>   buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    fd = open( FIFO_NAME, O_RDONLY);</span><br><span class="line">    <span class="keyword">int</span> ret = read(fd, buf, BUF_SIZE );</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">-1</span> == ret )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;read error!\r\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;read %s from %s&quot;</span>,buf,FIFO_NAME );</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="/images/fifo.png"></p><h1 id="无名管道"><a href="#无名管道" class="headerlink" title="无名管道"></a>无名管道</h1><p>pipe————-基于文件描述符<br>相关说明：ls—-ls命令其实也是一个进程，会把当前目录中的文件都列出来，但是它不会直接输出，而是把本来要输出到屏幕上的数据通过管道输出到  grep 这个进程中，作为grep进程的输入，然后这个进程对输入的信息进行筛选，把存在于 string的信息的字符串以行为单位打印在屏幕上；<br>特点：<br>①只能用于具有亲缘关系的进程之间的通信，  即父子进程或兄弟进程之间<br>②单工通信模式，具有 固定的读端 和 写端<br>③管道可以看成一种特殊文件，读写可以用 read() 和 write() ,但它不属于任一文件系统，只存在于内存中</p><p><img src="/images/pipe%E6%9C%AC%E8%B4%A8.png"></p><p>1、创建–pipe函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">pipe</span><span class="params">(  <span class="keyword">int</span>  fd[<span class="number">2</span>] )</span></span>;    <span class="comment">//返回：成功 0   错误 -1</span></span><br></pre></td></tr></table></figure><p>fd 参数返回两个文件描述符，  fd[0] 指向管道读端， fd[1] 指向管道写端—0-1 读 写<br>fd[1] 的输出是 fd[0] 的输入——–写端 输出 给读端的输入</p><p>管道如何实现进程间的通信？<br>[1]父进程 创建管道，得到两个文件描述符指向管道的两端<br>[2]父进程 fork 出子进程， 子进程也有两个文件描述符 指向同管道<br>[3]父进程关闭 fd[0]读，子进程关闭 fd[1]写，<br>即父进程关闭管道 读端，子进程关闭管道 写端，因为管道只支持单向通信，<br>管道由—环形队列实现<br>流程：<br><img src="/images/pipe%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>注意：<br>①只有在管道的读端存在时，向管道写入数据才有意义，否则写入会收到内核传来的  SIGPIPE信号（Broken Pipe 管道破裂）<br>②向管道写入数据时，Linux不保证写入  的原子性，管道缓冲区只要有空间，写进程就会试图向管道写入数据，如果管道缓冲区已满，  写操作一直阻塞<br>③父子进程在 运行时，它们的执行先后次序不能保证，为了保证  父子进程已经关闭了 相应的文件描述符， 可在两个进程中调用 sleep() 函数，也可以用  进程的同步互斥机制</p><p>demo：<br>pipe.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_DATA_LEN    256  <span class="comment">//定义最大数据长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELAY_TIME      1    <span class="comment">//延时时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span>  pid;         <span class="comment">//进程 id</span></span><br><span class="line">    <span class="keyword">int</span> pipe_fd[<span class="number">2</span>];  <span class="comment">//定义无名管道的文件描述符</span></span><br><span class="line">    <span class="keyword">char</span> buf[MAX_DATA_LEN];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>  data[] = <span class="string">&quot;Pipe Test Program\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> real_read, real_write;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">&#x27;\0&#x27;</span>,<span class="keyword">sizeof</span>(buf) );</span><br><span class="line">    <span class="comment">// create pipe</span></span><br><span class="line">    <span class="keyword">if</span> ( pipe( pipe_fd) &lt; <span class="number">0</span> )  <span class="comment">//success:0   error: -1</span></span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;create pipe error!\r\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fork 子进程</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>== ( pid = fork())) <span class="comment">//fork返回值： 0子进程   &gt;0 父进程  -1出错</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// child process</span></span><br><span class="line">        <span class="comment">// 子进程关闭  写描述符，并通过sleep(1)  等待 父进程也关闭相应的描述符</span></span><br><span class="line">        close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">        sleep(DELAY_TIME );</span><br><span class="line">        <span class="comment">// 子进程读取管道内容，</span></span><br><span class="line">        <span class="keyword">if</span> ( (real_read = read(pipe_fd[<span class="number">0</span>],  buf, MAX_DATA_LEN ) ) &gt;<span class="number">0</span>  )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d bytes read from the pipe is &#x27;%s&#x27; \r\n  &quot;</span>, real_read, buf);</span><br><span class="line">        &#125;</span><br><span class="line">        close(pipe_fd[<span class="number">0</span>] );  <span class="comment">//关闭子进程  读 描述符</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( pid &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 父进程 关闭读取  描述符</span></span><br><span class="line">        close( pipe_fd[<span class="number">0</span>] );</span><br><span class="line">        <span class="keyword">if</span> ( <span class="number">-1</span> != (real_write = write( pipe_fd[<span class="number">1</span>], data, <span class="built_in">strlen</span>(data) +<span class="number">1</span> )) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;parent write %s to pipe, %d bytes\r\n&quot;</span>,data, real_write );</span><br><span class="line">        &#125;</span><br><span class="line">        close( pipe_fd[<span class="number">1</span>] );</span><br><span class="line">        waitpid(pid, <span class="literal">NULL</span>,  <span class="number">0</span> );    <span class="comment">//收集子进程退出信息</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现：<br><img src="./images/pipe_demo.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 有名管道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者demo-有名管道+信号量</title>
      <link href="/2020/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85demo-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
      <url>/2020/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85demo-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h6 id="生产者-消费者-Demo"><a href="#生产者-消费者-Demo" class="headerlink" title="生产者-消费者 Demo"></a>生产者-消费者 Demo</h6><p>相关描述：有一个有限缓冲区，（用有名管道实现 FIFO 式缓冲区）<br>有两个线程，生产者和消费者，它们分别不停的把产品放入缓冲区 和 从缓冲区中拿走产品<br>一个生产者在 缓冲区 满的时候必须等待<br>消费者缓冲区 空的时候也必须等待<br>因为缓冲区时是  临界资源， 所以生产者消费者必须互斥执行<br>临界资源： // 一次仅允许一个进程使用的 共享资源<br>&ensp; &ensp;&ensp;//各进程采取互斥的方式，实现共享的资源称作  临界资源<br>&ensp; &ensp;&ensp;//消息队列、变量、数组、缓冲区—–</p><p>生产者—&gt; |           缓冲区资源                 |  –&gt; 消费者<br>用有名管道来模拟  有限缓冲区<br>有名管道：有名管道是一个能在互不相关进程之间传送数据的特殊文件，一个或多个进程向内写入数据，在另一端由一个进程负责读出，有名管道在文件系统中可见， ls， 又称为 FIFO ，先入先出–&amp;&amp;&amp;wht？</p><p>如何建立有名管道？<br>shell 交互创建有名管道   mknod   //   mkfifo  命令<br>在有些系统中， mkond 产生的文件可能在 /etc 目录下<br>程序中建立有名管道：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">umask(<span class="number">0</span>);  <span class="comment">//明确设置 umask，因为不知道谁会读写管道</span></span><br><span class="line"><span class="keyword">if</span> ( mknod <span class="comment">/*mkfifo*/</span> (<span class="string">&quot;test_fifo&quot;</span>, S_IRUSR | S_IWUSR | S_IRUSR | S_IWGRP))</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有名管道使用：<br>用 read() 和 write() 进行操作<br>如果用  读写方式 O_RDWR  方式打开， 则不会引起阻塞</p><p>使用 3 个信号量– 其中 avail 和 full 分别用来解决生产者和消费者线程间的同步问题<br>avail  标识缓冲区中的空单元数，  初始值是 N<br>full     标识缓冲区中的非空单元数，初始值是 0<br>mutex 是互斥信号量， 初始值是 1—也可以用互斥锁实现</p><p>流程：<br>    开始–&gt;建立有名管道–&gt;打开有名管道–&gt;初始化 3 个信号量–&gt;创建生产者、消费者线程<br>    [1]生产者线程：p操作 avail(白嫖操作)—-&gt;p操作 mutex—–&gt;读管道—-&gt;V操作 full—-&gt;V操作  mutex—&gt;结束</p><p>   [2]消费者线程：p操作  full  –&gt; p操作  mutex–&gt; 写管道—&gt; V操作  avail—-&gt;v—mutex—&gt;结束</p><p>缓冲区3个单元，每个单元10字节，生成和消费过程随机(0-5s的随机时间间隔，而且生产者的速度差不多是消费者的 2 倍，)<br> src：<br> producer_customer.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相关头文件包含</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;      //</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;    //</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  警告不兼容  memset，  要包含头文件  string.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYFIFO   <span class="meta-string">&quot;myfifo&quot;</span>  <span class="comment">//缓冲区有名管道的名字</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE   3  <span class="comment">//缓冲区的单元数</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIT_SIZE   10  <span class="comment">//每个单元的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RUN_TIME  30  <span class="comment">//运行时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELAY_TIME  5.0  <span class="comment">//周期的最大值</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  fd;    <span class="comment">//全局定义文件描述符</span></span><br><span class="line"><span class="comment">//pthread_mutex_t   mutex;</span></span><br><span class="line"><span class="keyword">sem_t</span>   sem_mutex;   <span class="comment">//这里不是互斥锁，而是  信号量 sem_t</span></span><br><span class="line"><span class="keyword">sem_t</span> avail, full;</span><br><span class="line"><span class="keyword">time_t</span>  end_time;   <span class="comment">//结束时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者线程处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">producer</span><span class="params">( <span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> real_write;</span><br><span class="line">    <span class="keyword">int</span> delay_time = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  time_t time = time( NULL );   获取系统时间，单位为s   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( time(<span class="literal">NULL</span>) &lt; end_time )  <span class="comment">//当前系统时间小于预定的结束时间</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 给延时时间赋随机值</span></span><br><span class="line">        <span class="comment">//  rand() 产生一个 0--0x7fff 即 0--32767 之间的随机数</span></span><br><span class="line">        <span class="comment">//  stdlib.h 中有  #define RAND_MAX  0X7fff</span></span><br><span class="line">        <span class="comment">//  rand() / (RAND_MAX + 1.0 ) 就等于一个  0-1 之间的小数</span></span><br><span class="line">        <span class="comment">//  分析： rand()最大 32767  最小 0  除以32767 就是 0-1 之间小数</span></span><br><span class="line">        <span class="comment">//  不能等于1  再乘以 10就是  0-10 不等于 10，最后在加1 就是</span></span><br><span class="line">        <span class="comment">//  0-10可以取到10了</span></span><br><span class="line">        <span class="comment">//  另外一种方法生成   一定范围内的随机数</span></span><br><span class="line">        <span class="comment">//  int a = rand() % 10;  0-9  10会被整除，取不到</span></span><br><span class="line">        <span class="comment">//  规定上下限  int a = rand() % 51 + 13;   13-63</span></span><br><span class="line">        <span class="comment">//  因为 %51 最大取50 + 13 保证最大 63</span></span><br><span class="line">        delay_time =  (<span class="keyword">int</span>)( rand()  * DELAY_TIME / ( RAND_MAX)  /<span class="number">2.0</span>  )   +<span class="number">1</span>;</span><br><span class="line">        sleep( delay_time );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Producer:delay=%d\r\n&quot;</span>,delay_time);</span><br><span class="line">        <span class="comment">// p 操作，白嫖先用，  信号量-1  sem_wait</span></span><br><span class="line">        </span><br><span class="line">        sem_wait( &amp;avail );    <span class="comment">// avail 缓冲区的空单元 初始N  初始5,  -1=4</span></span><br><span class="line">        sem_wait( &amp;sem_mutex );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int * semvalue = NULL;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> numsem;</span><br><span class="line">        sem_getvalue( &amp;avail,  &amp;numsem);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;avail=%d\r\n&quot;</span>,  numsem  );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  把 sem 指向的信号量 当前值 放置在 semvalue 指向的整数上  成功返回 0,</span></span><br><span class="line">        <span class="comment">//  error:  -1</span></span><br><span class="line">        <span class="comment">//sem_getvalue(  &amp;avail,  semvalue  );</span></span><br><span class="line">        <span class="comment">//printf(&quot;avail=%d\r\n&quot;, *semvalue  );   //得到sem 的值要用  sem_getvalue</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*生产者写入数据  */</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="number">-1</span> == ( real_write = write(fd,<span class="string">&quot;hello you&quot;</span>, UNIT_SIZE )  )  )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( errno == EAGAIN )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;The fifo has not been read yet,please try later\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//写入成功</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;write %d to the fifo\r\n&quot;</span>,real_write );</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  V 操作释放  mutex-操作权  和</span></span><br><span class="line">        <span class="comment">//  full----full是fifo缓冲区的非空单元数，初始为 0，V操作 +1</span></span><br><span class="line">        <span class="comment">//  当 full == size 的时候 就没有非空了 ，无法写    sem_post</span></span><br><span class="line">        sem_post( &amp;full );   <span class="comment">//full+1------- 0 +1 =1</span></span><br><span class="line">        sem_post( &amp;sem_mutex ); <span class="comment">//sem_mutex 初始值1，   0 + 1 =1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit( <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">customer</span><span class="params">( <span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义 buff 用于保存读出的数据</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> read_buffer[ UNIT_SIZE ];</span><br><span class="line">    <span class="keyword">int</span> real_read;   <span class="comment">//实际读出的字节数</span></span><br><span class="line">    <span class="keyword">int</span> delay_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( time(<span class="literal">NULL</span> ) &lt; end_time )</span><br><span class="line">    &#123;</span><br><span class="line">        delay_time = (<span class="keyword">int</span>)( rand() * DELAY_TIME /  ( ( RAND_MAX)) / <span class="number">2.0</span>) + <span class="number">1</span> ;</span><br><span class="line">        sleep( delay_time );</span><br><span class="line">        <span class="keyword">int</span> numsem;</span><br><span class="line"></span><br><span class="line">        sem_getvalue(&amp;sem_mutex,  &amp;numsem );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Custom:sem_mutex=%d\r\n&quot;</span>,numsem );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  p 操作  full  和  mutex 信号量</span></span><br><span class="line">        sem_wait( &amp;full );      <span class="comment">//将 代表 非空单元数， -1, 没有可读的就阻塞，用于保证生产者先生产</span></span><br><span class="line">        sem_wait( &amp;sem_mutex ); <span class="comment">// sem_mutex -1 = 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sem_getvalue(&amp;sem_mutex,  &amp;numsem );</span></span><br><span class="line">        <span class="comment">//printf(&quot;Custom:sem_mutex=%d\r\n&quot;,numsem );</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// memset</span></span><br><span class="line">        <span class="built_in">memset</span>( read_buffer, <span class="string">&#x27;0&#x27;</span>,UNIT_SIZE );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Customer:delay=%d\r\n&quot;</span>,delay_time);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (  <span class="number">-1</span> == (real_read = read(fd, read_buffer, UNIT_SIZE )))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EAGAIN )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;No data yet\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read %s from fifo\r\n&quot;</span>,read_buffer);</span><br><span class="line">        <span class="comment">// V 操作信号量，释放资源   mutex  avail</span></span><br><span class="line">        sem_post( &amp;avail );  <span class="comment">//读取完让 avail + 1，可写的多一个</span></span><br><span class="line">        sem_post( &amp;sem_mutex );</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;producer_customer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义生产者和消费者的线程描述符</span></span><br><span class="line">    <span class="keyword">pthread_t</span>  producer_id, customer_id;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先埋下种子</span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>)  );</span><br><span class="line">    end_time = time( <span class="literal">NULL</span>  ) + RUN_TIME ;  <span class="comment">//定义结束时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建有名管道  fifo</span></span><br><span class="line">    <span class="keyword">if</span> (  ( mkfifo( MYFIFO, O_CREAT  | O_EXCL) &lt; <span class="number">0</span> )  &amp;&amp; ( errno != EEXIST )<span class="comment">/* or  mknod*/</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;create fifo error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> errno;   <span class="comment">//返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// open  fifo</span></span><br><span class="line">    fd = open( MYFIFO,  O_RDWR);   <span class="comment">//可读可写   O_RDWR</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">-1</span> == fd )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open fifo error\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化 init 信号量为 1</span></span><br><span class="line">    ret = sem_init(&amp;sem_mutex, <span class="number">0</span>, <span class="number">1</span>);   <span class="comment">//0代表只用于线程间，  1是mutex的初始化值</span></span><br><span class="line">    <span class="comment">// 初始化  avail 的信号量为  N    成功 0  失败  -1</span></span><br><span class="line">    ret += sem_init( &amp;avail, <span class="number">0</span>, BUFFER_SIZE );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 full 信号量 为 0</span></span><br><span class="line">    ret += sem_init( &amp;full, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">0</span> != ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;some sem init error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建两个线程</span></span><br><span class="line">    ret = pthread_create( &amp;producer_id, <span class="literal">NULL</span> , producer, <span class="literal">NULL</span>);  <span class="comment">//有参的话传入  void *</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">0</span> != ret )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;create pthread_producer error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ret = pthread_create( &amp;customer_id, <span class="literal">NULL</span>, customer, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">0</span> != ret )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;create pthread_customer error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阻塞等待线程结束   pthread_join</span></span><br><span class="line">    pthread_join( producer_id, <span class="literal">NULL</span> );  <span class="comment">//void ** result</span></span><br><span class="line">    pthread_join( customer_id, <span class="literal">NULL</span> );</span><br><span class="line">    close(fd );   <span class="comment">//关闭打开的文件描述符</span></span><br><span class="line">    unlink( MYFIFO );  <span class="comment">//关闭管道连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:<br><img src="images/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93+%E4%BF%A1%E5%8F%B7%E9%87%8F.png"><br><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\生产者消费者-有名管道+信号量.png"></p>]]></content>
      
      
      <categories>
          
          <category> 生产者消费者demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有名管道，信号量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程-demo问题</title>
      <link href="/2020/08/09/%E7%BA%BF%E7%A8%8B-demo%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/%E7%BA%BF%E7%A8%8B-demo%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>src：<br>thread.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PTHREAD_NUM 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">pthread_func_1</span><span class="params">( <span class="keyword">void</span> * arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">pthread_func_1</span><span class="params">( <span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int count = *((int *)arg);</span></span><br><span class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span> )arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count=%d\r\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">int</span> param = PARAM;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// arg 用来标识是哪个线程</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0</span> == count )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// lock</span></span><br><span class="line">            <span class="keyword">if</span> (  <span class="number">0</span> != (res = pthread_mutex_lock(&amp;mutex) )  )</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;lock error!\r\n&quot;</span>);</span><br><span class="line">                pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread %d lock\r\n&quot;</span>,count );</span><br><span class="line">            <span class="comment">// 线程 1</span></span><br><span class="line">            param = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread 1: param=%d\r\n&quot;</span>,param);</span><br><span class="line">            <span class="comment">//unlock</span></span><br><span class="line">            <span class="keyword">if</span> ( <span class="number">0</span> != ( res = pthread_mutex_unlock(&amp;mutex) ))</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;unlock error!\r\n&quot;</span>);</span><br><span class="line">                pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread %d unlock\r\n&quot;</span>,count);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">1</span> == count )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// lock</span></span><br><span class="line">            <span class="keyword">if</span> (   <span class="number">0</span> != (res = pthread_mutex_lock(&amp;mutex) )  )</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;lock error!\r\n&quot;</span>);</span><br><span class="line">                pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread %d lock\r\n&quot;</span>,count );</span><br><span class="line">            <span class="comment">// 线程 1</span></span><br><span class="line">            param = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread 1: param=%d\r\n&quot;</span>,param);</span><br><span class="line">            <span class="comment">//unlock</span></span><br><span class="line">            <span class="keyword">if</span> ( <span class="number">0</span> != ( res = pthread_mutex_unlock(&amp;mutex) ))</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;unlock error!\r\n&quot;</span>);</span><br><span class="line">                pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;thread %d unlock\r\n&quot;</span>,count);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;thread.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化  锁</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> thread[PTHREAD_NUM];   <span class="comment">// pthread_t 数组 保存生成的 pthread_t 线程描述符</span></span><br><span class="line">    <span class="comment">// create thread</span></span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (num=<span class="number">0</span>;num&lt;PTHREAD_NUM;num++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=pthread_create( &amp;thread[num],<span class="literal">NULL</span>,pthread_func_1,(<span class="keyword">void</span> *)num );</span><br><span class="line">        <span class="keyword">if</span> ( <span class="number">0</span> != res )</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;create pthread error\r\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread %d create success!\r\n&quot;</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pthread create success,wait for:\r\n&quot;</span>);</span><br><span class="line">    <span class="comment">// destroy</span></span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="/images/errordemo.png"><br><img src="/images/rightdemo.png"><br><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\errordemo.png"><br><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\rightdemo.png"></p>]]></content>
      
      
      <categories>
          
          <category> 进程线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程-信号量</title>
      <link href="/2020/08/09/%E7%BA%BF%E7%A8%8B-%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
      <url>/2020/08/09/%E7%BA%BF%E7%A8%8B-%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>信号量就是：  （主要用于共享数据的同步访问）<br>操作系统中用到的 PV 原子操作，广泛应用于进程和线程间的同步和互斥<br>本质：是一个  非负 的整数计数器，被用来控制对公共资源的访问<br>PV 操作主要用于  同步  和  互斥 两种应用场景</p><p>linux 实现 POSIX 的无名信号量用于线程间的同步互斥</p><p>sem接口函数操作的参数都是信号量指针       sem_t  *<br>[1]初始化信号量<br>#include &lt;semaphore.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">sem_init</span><span class="params">( <span class="keyword">sem_t</span> * sem,  <span class="keyword">int</span>  pshared, <span class="keyword">unsigned</span>  <span class="keyword">int</span>  value)</span></span>;</span><br><span class="line">sem:信号量对象       </span><br><span class="line">pshared：决定信号量是否在线程间共享，目前未实现，默认<span class="number">0</span>，标识只能进程内的线程间 共享</span><br><span class="line">value：信号量初始化值</span><br><span class="line"><span class="keyword">return</span>:  success:<span class="number">0</span>                       error:<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>[2]sem_wait()  和 sem_trywait()  相当于 p 操作———-P 代表白嫖p， 用内容<br>在信号量 &gt; 0 时能将信号量值 -1，<br>区别：信号量为 0 时， sem_wait  会阻塞，  sem_trywait 立即返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">sem_wait</span><span class="params">( <span class="keyword">sem_t</span>   * sem )</span></span>;  <span class="comment">//获取信号量，不成功则----阻塞</span></span><br></pre></td></tr></table></figure><p>[3]sem_post()    相当于   V 操作——-V 释放</p><p>将信号量的值  +1，  同时唤醒等待的线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">sem_post</span><span class="params">( <span class="keyword">sem_t</span>   * sem )</span></span>;     <span class="comment">//释放信号量</span></span><br></pre></td></tr></table></figure><p>[4]sem_getvalue()   获得信号量的值</p><p>[5]sem_destroy()    删除信号量</p><h6 id="1、-互斥"><a href="#1、-互斥" class="headerlink" title="1、 互斥"></a>1、 互斥</h6><p>几个进程（或线程）往往只设置一个信号量 sem。</p><h6 id="2、同步"><a href="#2、同步" class="headerlink" title="2、同步"></a>2、同步</h6><p>信号量用于同步操作时， 往往会设置<strong>多个</strong>信号量，并安排不同的初始值来实现 它们 之间的顺序执行</p>]]></content>
      
      
      <categories>
          
          <category> 进程线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程-互斥锁</title>
      <link href="/2020/08/08/%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/"/>
      <url>/2020/08/08/%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</url>
      
        <content type="html"><![CDATA[<p>由于线程共享进程的资源和地址空间，因此在对资源操作时，必须考虑到线程间资源的访问和互斥问题</p><p>1、互斥锁线程控制<br>&ensp; &ensp;&ensp;&ensp;&ensp;互斥锁通过简单的方式保证对共享资源的原子操作<br>&ensp; &ensp;&ensp;&ensp;&ensp;原子操作是不可分割的，在执行完毕之前不会被任何其它任务或事件中断</p><p>互斥锁操作： 上锁 和 解锁<br>同一时刻只能有一个线程持有某个互斥锁，拥有互斥锁的线程能够对共享资源进行操作，若线程对一个已经被上锁的互斥锁加锁，该线程就会睡眠，直到其他线程释放掉互斥锁为止。<br>互斥锁机制实现函数：<br>#include &lt;pthread.h&gt;<br>[1]互斥锁初始化：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_init( <span class="name">pthread_mutex_t</span> * mutex, const pthread_mutexattr_t * mutexattr)<span class="comment">;</span></span><br><span class="line">mutex；互斥锁         mutexattr:互斥锁属性， NULL 标识缺省参数</span><br><span class="line">return:  success:0     error:错误码</span><br></pre></td></tr></table></figure><p>[2]互斥锁上锁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_lock( <span class="keyword">pthread_mutex_t</span> *  mutex  );   <span class="comment">//加锁，不成功则阻塞自己</span></span><br></pre></td></tr></table></figure><p>[3]互斥锁判断上锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_trylock(  <span class="keyword">pthread_mutex_t</span> *  mutex); <span class="comment">//加锁，若不成功则返回，立即返回！！</span></span><br></pre></td></tr></table></figure><p>[4]互斥锁解锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_unlock(  <span class="keyword">pthread_mutex_t</span> *  mutex );</span><br></pre></td></tr></table></figure><p>[5]消除/摧毁 互斥锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_destroy( <span class="keyword">pthread_mutex_t</span> *  mutex );</span><br></pre></td></tr></table></figure><p>线程间互斥锁Demo：<br>pthread_mutex.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_NUM    3   <span class="comment">//定义线程数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REPEAT_TIMES  3   <span class="comment">//定义线程的循环次数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELAY_TIME   6.0  <span class="comment">//定义循环之间的最大时间间隔</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span>  mutex;   <span class="comment">//定义全局的线程互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程的功能函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *  <span class="title">thread_function</span><span class="params">( <span class="keyword">void</span> * arg )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> thread_num = (<span class="keyword">int</span>)arg;   <span class="comment">//标识是哪一个线程</span></span><br><span class="line">    <span class="keyword">int</span> delay_time = <span class="number">0</span>,count=<span class="number">0</span>;  <span class="comment">//count计数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">// lock</span></span><br><span class="line">    res = pthread_mutex_lock( &amp;mutex );</span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0</span> != res )  <span class="comment">//or  ( res )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d lock failed\r\n&quot;</span>, thread_num);</span><br><span class="line">        pthread_exit( <span class="literal">NULL</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is start\r\n&quot;</span>, thread_num);</span><br><span class="line">    <span class="keyword">for</span>(count=<span class="number">0</span>;count&lt;REPEAT_TIMES; count++ )</span><br><span class="line">    &#123;</span><br><span class="line">        delay_time = (<span class="keyword">int</span>)( rand()*DELAY_TIME/(RAND_MAX)) +<span class="number">1</span>;</span><br><span class="line">        sleep( delay_time );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d :job:%d,delay:%d&quot;</span>,thread_num,count,delay_time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread %d finish\r\n&quot;</span>,thread_num);</span><br><span class="line">    <span class="comment">// unlock</span></span><br><span class="line">    pthread_mutex_unlock( &amp;mutex);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pthread_mutex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span>  thread[THREAD_NUM ];  <span class="comment">//创建pthread_t 类型的数组标识线程 标识符</span></span><br><span class="line">    <span class="comment">//解析：之所以用数组没有初始化直接传参是create函数会返回phread_t 类型，指针用于返回值</span></span><br><span class="line">    <span class="keyword">int</span> no = <span class="number">0</span>,res;</span><br><span class="line">    <span class="keyword">void</span> * thread_res;</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// mutex_init</span></span><br><span class="line">    pthread_mutex_init( &amp;mutex, <span class="literal">NULL</span> );</span><br><span class="line">    <span class="keyword">for</span> ( no=<span class="number">0</span>;no&lt;THREAD_NUM;no++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// create pthread</span></span><br><span class="line">        res = pthread_create(&amp; thread[no], <span class="literal">NULL</span>, thread_function, (<span class="keyword">void</span> *)no ); </span><br><span class="line">        <span class="comment">//最后是线程功能函数需要的参数</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="number">0</span> != res )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Create thread %d failed\r\n&quot;</span>,no );</span><br><span class="line">            <span class="built_in">exit</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Create all success,wait for finish\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//阻塞式等待结束</span></span><br><span class="line">    <span class="keyword">for</span>(no=<span class="number">0</span>;no&lt;THREAD_NUM;no++)</span><br><span class="line">    &#123;</span><br><span class="line">        res = pthread_join( thread[no], &amp;thread_res );  <span class="comment">//param2：接收被等候待线程结束返回值 是 void **</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="number">0</span> == res )  <span class="comment">//or (!res)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Thread %d joined&quot;</span>, no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Thread %d joined failed\r\n&quot;</span>,no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_destroy(  &amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果<br><img src="/images/mutex.png"><br><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\mutex.png"></p>]]></content>
      
      
      <categories>
          
          <category> 进程线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程-linux</title>
      <link href="/2020/08/07/%E8%BF%9B%E7%A8%8B-linux/"/>
      <url>/2020/08/07/%E8%BF%9B%E7%A8%8B-linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程传输协议详解</title>
      <link href="/2020/08/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>诺瓦2020提前批笔试</title>
      <link href="/2020/08/07/%E8%AF%BA%E7%93%A62020%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95/"/>
      <url>/2020/08/07/%E8%AF%BA%E7%93%A62020%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p> flight.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEAD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *     description:</span></span><br><span class="line"><span class="comment"> *     航班和乘客，乘客中用 GREEN、YELLOW、RED 标识身体情况， 规则:</span></span><br><span class="line"><span class="comment"> *     一列航班中 RED==0  没有问题</span></span><br><span class="line"><span class="comment"> *     RED &gt; 10%  紧急停机检查</span></span><br><span class="line"><span class="comment"> *     0 &lt; RED &lt;  10%</span></span><br><span class="line"><span class="comment"> *     有风险，抵达目的地后进行检查</span></span><br><span class="line"><span class="comment"> *     代码实现</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;封装 乘客struct&gt; select  链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">passenger</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> * name;</span><br><span class="line">    <span class="keyword">char</span> * id_card;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passenger</span> * <span class="title">pNext</span>;</span></span><br><span class="line">    <span class="keyword">int</span> flight_id;</span><br><span class="line">    <span class="keyword">int</span> healthcode; <span class="comment">// 乘客的健康等级</span></span><br><span class="line">&#125;<span class="keyword">passenger_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;封装 flight struct&gt;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">flight</span>&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * orig_city;<span class="comment">//初始地</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * dest_city;</span><br><span class="line">    <span class="keyword">int</span> flight_id;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">flight</span> * <span class="title">pNext</span>;</span></span><br><span class="line">    <span class="keyword">passenger_t</span> * pHead_passenger;   <span class="comment">//飞机包含乘客链表</span></span><br><span class="line">    <span class="keyword">int</span> Goodlevel;     <span class="comment">//评估飞机的安全等级</span></span><br><span class="line">    <span class="keyword">int</span> passengerNum;    <span class="comment">//保存航班的乘客总人数</span></span><br><span class="line">    <span class="keyword">int</span> redNum;        <span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> yellowNum;</span><br><span class="line">&#125;<span class="keyword">flight_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    EN_GREEN,</span><br><span class="line">    EN_YELLOW,</span><br><span class="line">    EN_RED</span><br><span class="line">&#125;en_health_code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * function:create a flightHead</span></span><br><span class="line"><span class="comment"> * return:pHead_flight</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">flight_t</span> *  <span class="title">createFlight</span><span class="params">( <span class="keyword">void</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * function:create a  passengerHead</span></span><br><span class="line"><span class="comment"> * return:pHead_passenger</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">passenger_t</span> * <span class="title">createPassenger</span><span class="params">( <span class="keyword">void</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加航班信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addFlight</span><span class="params">(<span class="keyword">flight_t</span> * pHead,<span class="keyword">int</span> flight_id, <span class="keyword">const</span>  <span class="keyword">char</span> * orig_city, <span class="keyword">const</span> <span class="keyword">char</span> * dest_city )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加乘客信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">addPassenger</span><span class="params">( <span class="keyword">flight_t</span> * pHead, <span class="keyword">int</span> flight_id, <span class="keyword">char</span> * name, <span class="keyword">char</span> * id_card, <span class="keyword">int</span> healthcode )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">showPassenger</span><span class="params">( <span class="keyword">flight_t</span> * pHead,<span class="keyword">int</span> flight_id )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showFlight</span><span class="params">( <span class="keyword">flight_t</span> * pHead)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// function:计算某航班的风险值并返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRisk</span><span class="params">( <span class="keyword">flight_t</span> * pHead, <span class="keyword">int</span> flight_id )</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flight.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flight.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">flight_t</span> * <span class="title">createFlight</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">flight_t</span> * pHead_flight = (<span class="keyword">flight_t</span> * )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="keyword">flight_t</span> ));</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pHead_flight )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">flight_t</span> *)<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>( pHead_flight , <span class="string">&#x27;\0&#x27;</span> , <span class="keyword">sizeof</span>( <span class="keyword">flight_t</span> ) );</span><br><span class="line">    pHead_flight-&gt;flight_id = <span class="number">0</span>;</span><br><span class="line">    pHead_flight-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create flight success\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> pHead_flight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">passenger_t</span> * <span class="title">createPassenger</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">passenger_t</span> * pHead_passenger = (<span class="keyword">passenger_t</span> * )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="keyword">passenger_t</span>));</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pHead_passenger )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="keyword">passenger_t</span> * )<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>( pHead_passenger , <span class="string">&#x27;\0&#x27;</span> , <span class="keyword">sizeof</span>( <span class="keyword">passenger_t</span> ) );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create passenger success\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> pHead_passenger;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addFlight</span><span class="params">( <span class="keyword">flight_t</span> * pHead, <span class="keyword">int</span> flight_id, <span class="keyword">const</span> <span class="keyword">char</span> * orig_city,  <span class="keyword">const</span> <span class="keyword">char</span> * dest_city )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span>==pHead || flight_id &lt; <span class="number">0</span> || <span class="literal">NULL</span> == orig_city || <span class="literal">NULL</span> == dest_city )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;param error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">flight_t</span> * temp = (<span class="keyword">flight_t</span> * )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">flight_t</span> ));</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(<span class="keyword">flight_t</span> )  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">flight_t</span> * pNew = (<span class="keyword">flight_t</span> * )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">flight_t</span> ));</span><br><span class="line">    <span class="built_in">memset</span>( pNew , <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(<span class="keyword">flight_t</span> )  );</span><br><span class="line">    <span class="comment">//不能对空指针进行赋值，  要新 malloc  pNew</span></span><br><span class="line">    pNew-&gt;flight_id = flight_id;</span><br><span class="line">    pNew-&gt;orig_city = orig_city;</span><br><span class="line">    pNew-&gt;dest_city = dest_city;</span><br><span class="line">    pNew-&gt;pHead_passenger =(<span class="keyword">passenger_t</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="keyword">passenger_t</span> ));</span><br><span class="line">    temp = pHead;</span><br><span class="line">    <span class="keyword">while</span>( temp-&gt;flight_id != flight_id &amp;&amp; temp-&gt;pNext != <span class="literal">NULL</span> ) <span class="comment">//对，应该判断前一个，然后赋值好赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp =temp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp !=  <span class="literal">NULL</span> &amp;&amp; temp-&gt;flight_id == flight_id )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;flight  already  exist!, add error\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;pNext=  pNew;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add success\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showFlight</span><span class="params">( <span class="keyword">flight_t</span> * pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>  ==pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;param error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">flight_t</span>*  temp = pHead;</span><br><span class="line">    <span class="keyword">while</span>( temp != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// flight_id=0是头节点，可不打印</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="number">0</span> == temp-&gt;flight_id )</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;flight_id--%d  起始地点--%s,  目的地点--%s \r\n&quot;</span>,</span><br><span class="line">                temp-&gt;flight_id,</span><br><span class="line">                temp-&gt;orig_city,</span><br><span class="line">                temp-&gt;dest_city</span><br><span class="line">              );</span><br><span class="line">        temp = temp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;show ok\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addPassenger</span><span class="params">(  <span class="keyword">flight_t</span> * pHead ,<span class="keyword">int</span> flight_id,  <span class="keyword">char</span> * name,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">char</span> * id_card, <span class="keyword">int</span> healthcode )</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pHead || flight_id &lt;<span class="number">0</span> || <span class="literal">NULL</span> == name || <span class="literal">NULL</span> == id_card )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot; param error\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">flight_t</span> * ptmp = pHead;</span><br><span class="line">    <span class="keyword">while</span> ( ptmp-&gt;flight_id != flight_id   )</span><br><span class="line">    &#123;</span><br><span class="line">        ptmp = ptmp-&gt;pNext;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="literal">NULL</span> == ptmp) </span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot; flight_id error!\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">passenger_t</span> * pNew = ( <span class="keyword">passenger_t</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">passenger_t</span> ));</span><br><span class="line">    pNew-&gt;flight_id=flight_id;   <span class="comment">//0 green   1 yellow  2 red</span></span><br><span class="line">    pNew-&gt;healthcode=healthcode;</span><br><span class="line">    pNew-&gt;id_card = id_card;</span><br><span class="line">    pNew-&gt;name = name;</span><br><span class="line">    ptmp-&gt;passengerNum += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="number">2</span> == healthcode  )</span><br><span class="line">    &#123;</span><br><span class="line">        ptmp-&gt;redNum += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">1</span> == healthcode )</span><br><span class="line">    &#123;</span><br><span class="line">        ptmp-&gt;yellowNum += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">passenger_t</span> * pq = ( <span class="keyword">passenger_t</span> *)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">passenger_t</span> ));</span><br><span class="line">    pq = ptmp-&gt;pHead_passenger;</span><br><span class="line">    <span class="keyword">while</span>( pq-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pq = pq-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    pq-&gt;pNext = pNew;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showPassenger</span><span class="params">( <span class="keyword">flight_t</span> * pHead,  <span class="keyword">int</span> flight_id )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pHead || flight_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot; param error\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">flight_t</span> * temp = pHead;</span><br><span class="line">    <span class="comment">// 用temp-&gt;pNext 做判断最后好赋值</span></span><br><span class="line">    <span class="keyword">while</span>( temp-&gt;pNext != <span class="literal">NULL</span> &amp;&amp; temp-&gt;flight_id != flight_id )</span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp-&gt;flight_id != flight_id &amp;&amp; temp-&gt;pNext == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot; flight_id error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp-&gt;flight_id == flight_id )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//passenger_t * pp = temp-&gt;pHead_passenger;  因为第一个是头节点，不打印</span></span><br><span class="line">        <span class="keyword">passenger_t</span>  * pp = temp-&gt;pHead_passenger-&gt;pNext;</span><br><span class="line">        <span class="keyword">while</span> ( pp != <span class="literal">NULL</span>)   <span class="comment">//遍历打印是   pp != NULL</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;passenger info:// name:%s,   card_id:%s,   healthcode:%d,  flight_id:%d,   origCity:%s,  destCity:%s \r\n&quot;</span>,</span><br><span class="line">                    pp-&gt;name,pp-&gt;id_card,pp-&gt;healthcode,pp-&gt;flight_id, temp-&gt;orig_city,temp-&gt;dest_city);</span><br><span class="line">            pp=pp-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRisk</span><span class="params">( <span class="keyword">flight_t</span> * pHead, <span class="keyword">int</span> flight_id )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="literal">NULL</span> == pHead || flight_id &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot; param error!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">flight_t</span> * ptemp = pHead;</span><br><span class="line">    <span class="keyword">while</span> ( ptemp-&gt;flight_id != flight_id &amp;&amp; ptemp-&gt;pNext != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptemp = ptemp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ptemp-&gt;pNext == <span class="literal">NULL</span> &amp;&amp; ptemp-&gt;flight_id != flight_id)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">float</span> redRisk =(<span class="keyword">float</span>)ptemp-&gt;redNum / (<span class="keyword">float</span>)ptemp-&gt;passengerNum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;passengerNum=%d, redNum=%d, yellowNum=%d\r\n&quot;</span>,ptemp-&gt;passengerNum,ptemp-&gt;redNum, ptemp-&gt;yellowNum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;redRisk=%f\r\n&quot;</span>, redRisk);</span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0</span> == redRisk)</span><br><span class="line">    &#123;</span><br><span class="line">        ptemp-&gt;Goodlevel = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;plane safe, take off\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( redRisk &gt;= <span class="number">0.1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptemp-&gt;Goodlevel = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dangerous!!!!stop \r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( redRisk &gt; <span class="number">0</span> &amp;&amp; redRisk &lt; <span class="number">0.1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptemp-&gt;Goodlevel = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;just ok,but still need to be examine\r\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                                                                                                                                                                        </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flight.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">flight_t</span> * pHead_flight = createFlight();</span><br><span class="line">    <span class="keyword">passenger_t</span> * pHead_passenger = createPassenger();</span><br><span class="line">    addFlight(pHead_flight, <span class="number">1</span>, <span class="string">&quot;zhengzhou&quot;</span>,<span class="string">&quot;xian&quot;</span>);</span><br><span class="line">    addFlight(pHead_flight, <span class="number">2</span>, <span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;xian&quot;</span>);</span><br><span class="line">    <span class="comment">//addFlight(pHead_flight, 2, &quot;xinjiang&quot;,&quot;xian&quot;);</span></span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;Jim&quot;</span>, <span class="string">&quot;12345&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;SU&quot;</span>,  <span class="string">&quot;sadw&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;334&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;li&quot;</span>,   <span class="string">&quot;888&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;q&quot;</span>,    <span class="string">&quot;812&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;s&quot;</span>,    <span class="string">&quot;833&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;qwd&quot;</span>,  <span class="string">&quot;124&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;trgh&quot;</span>, <span class="string">&quot;oa9&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;dwew&quot;</span>, <span class="string">&quot;wevc&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">1</span>,<span class="string">&quot;uh&quot;</span>,   <span class="string">&quot;okn&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;sfd&quot;</span>,    <span class="string">&quot;plm&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;yth&quot;</span>,    <span class="string">&quot;adv&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;sf&quot;</span>,    <span class="string">&quot;okq&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;alib&quot;</span>,    <span class="string">&quot;13df&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;niuniu&quot;</span>,<span class="string">&quot;asf3&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;gui&quot;</span>,  <span class="string">&quot;qa1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;ww&quot;</span>,    <span class="string">&quot;qa2&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;gg&quot;</span>,    <span class="string">&quot;qa3&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;ym&quot;</span>,    <span class="string">&quot;qa4&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;shui&quot;</span>,    <span class="string">&quot;qa5&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;alp&quot;</span>,    <span class="string">&quot;ws5&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    addPassenger(pHead_flight,<span class="number">2</span>,<span class="string">&quot;hub&quot;</span>,    <span class="string">&quot;sf6&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    getRisk( pHead_flight, <span class="number">1</span>);</span><br><span class="line">    getRisk( pHead_flight, <span class="number">2</span>);</span><br><span class="line">    showFlight( pHead_flight );</span><br><span class="line">    showPassenger(pHead_flight,  <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果参考：<br><img src="/images/flight.png"><br><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\flight.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程-linux</title>
      <link href="/2020/08/05/%E7%BA%BF%E7%A8%8B-linux/"/>
      <url>/2020/08/05/%E7%BA%BF%E7%A8%8B-linux/</url>
      
        <content type="html"><![CDATA[<h4 id="线程–轻量级进程-内核调度的最小单元"><a href="#线程–轻量级进程-内核调度的最小单元" class="headerlink" title="线程–轻量级进程   //  内核调度的最小单元"></a>线程–轻量级进程   //  内核调度的最小单元</h4><p>为了进一步减少处理器的空转时间，支持多处理器，减少上下文切换开销</p><p>上下文切换：指的是内核（操作系统的核心）在CPU上对进程或者线程进行切换，上下文切换过程中的信息被保存在进程控制块（PCB-Process Control Block）中</p><p>过程：</p><p>`</p><pre><code>[1]先挂起一个进程，把这个进程在cpu中的状态（上下文信息）存储在内存的 PCB 中[2]在PCB中检索下一个进程的上下文并将其在CPU的寄存器中恢复[3]跳转到程序计数器所指向的位置（即跳转到进程被中断时的代码行）并恢复该进程`</code></pre><p>linux中的线程依赖于  pthread 线程库</p><p>1、创建线程： <code>pthread_create( pthread_t  * thread, pthread_attr_t *attr,void *( *start_routine)(void *), void * arg);</code></p><p>thread:    线程标识符</p><p>attr: 线程属性设置，  NULL 表示缺省属性</p><p>start_routine: 线程执行函数，参数和返回值都是 void *</p><p>arg: 传递给 线程执行函数用的参数</p><p>return:  success:0   error:错误码    </p><p>2、退出线程: <code> pthread_exit( void * retval );</code></p><p>retval: 线程结束时的返回值， 可以通过 pthread_join() 来接收<br>//但是使用中不能用 exit 退出线程，因为一般一个进程中包含多个线程，exit的作用是使当前进程终止，进程中所以线程都会over—<br>所以退出线程用 pthread_exit() 来替代</p><p>线程主动结束：可以调用 pthread_exit()</p><p>一个线程终止另外一个线程： 调用  pthread_cancel() 实现<br>// 在被取消的线程内部要  先调用 pthread_setcancel() 和 pthread_setcanceltype() 设置相应的取消状态</p><p>3、pthread_join()  以阻塞的方式等待 thread 指定的线程结束，函数返回时，被等待线程的资源被回收，如果线程已经结束，该函数会立即返回</p><p>resutn: success:0   error:错误号</p><p>函数原型：<code> pthread_join( pthread_t pthread, void ** thread_result );</code></p><p>thread:被等待线程的标识符</p><p>thread_result: 用户定义的指针，用来接收被等待线程结束时的返回值（如果返回不为NULL）</p><p>**<br>为什么是二级指针：**原因：一级指针只能用来改变指向内存的值，传递的就是指针p内存的地址,所以修改它就是修改了它自己的指向;</p><p>4、<code>pthread_cancel( pthread_t thread )</code></p><p>thread: 要取消的线程的 标识符</p><p>return:  success:0    error:错误码</p><p>线程函数使用 Demo<br> // 编译的时候需要链接 pthread</p><p>thread.h</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;stdlib.h&gt;</p><p>#include &lt;pthread.h&gt;</p><p>#define THREAD_NUM 3     // 线程数</p><p>#define REPEAT_TIMES 5 //每个线程中的循环次数限制</p><p>#define DELAY_TIME  6.0  //循环之间的最大时间间隔</p><p>线程处理函数</p><p>void * thread_function( void * arg)<br>{</p><pre><code>int thread_num = (int )arg;  //线程总数int delay_time = 0;   //延时int count = 0;        //计调用次数printf(&quot;thread %d start!\r\n&quot;,thread_num);for (count=0;count&lt;REPEAT_TIMES; count++ )&#123;    delay_time = (int)( rand() * DELAY_TIME / (RAND_MAX) ) +1 ;    sleep( delay_time );   //随机等待1--6 s, 模拟任务完成的时间随机    printf(&quot;Thread %d :job %d delay = %d\r\n&quot;, thread_num,count, delay_time);&#125;printf(&quot;Thread %d is finished\r\n&quot;, thread_num);pthread_exit(NULL);   //任务完成自行结束</code></pre><p>}</p><p>main.c</p><p>#include “thread.h”</p><p>int main( void )<br>{</p><pre><code>pthread_t thread[THREAD_NUM];  //定义存放 thread 号的类型数组int no = 0,res;void * thread_ret;srand( time( NULL ));   //埋下时间种子for( no=0; no&lt;THREAD_NUM; no++)&#123;    res = pthread_create(&amp;thread[no], NULL, thread_function, (void*)no );  //创建的时候是  pthread_t *    // no 标识是第几个线程    if ( res != 0 )  //create error    &#123;        printf(&quot;Create thread %d error\r\n&quot;, no);        exit(res);  // 结束进程， &lt;stdlib.h&gt; 参数不为0都异常    &#125;&#125;printf(&quot;Create threads success!\r\n&quot;);for( no=0;no&lt;THREAD_NUM;no++)&#123;    // pthread_join:  pthread_t thread    res = pthread_join( thread[no], &amp;thread_ret);   //阻塞式等待线程退出    //param_2  被等待线程结束的返回值,  void ** thread_result    if ( 0 == res ) //success:0   error:错误号    &#123;        printf(&quot;Thread %d joined\r\n&quot;,no);    &#125;    else    &#123;        printf(&quot;Thread %d joined failed\r\n&quot;, no);    &#125;&#125;return 0;</code></pre><p>}</p><p>运行情况：<br><img src="/images/pthread.png"></p>]]></content>
      
      
      <categories>
          
          <category> 多进程/线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制间转换</title>
      <link href="/2020/08/04/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/08/04/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>&lt;10进制—&gt;2进制&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ex:  <span class="number">19</span>---&gt; </span><br><span class="line">    <span class="number">19</span> / <span class="number">2</span> = <span class="number">9.</span>..<span class="number">.1</span></span><br><span class="line">    <span class="number">9</span> / <span class="number">2</span>  = <span class="number">4.</span>..<span class="number">.1</span></span><br><span class="line">    <span class="number">4</span> / <span class="number">2</span>  = <span class="number">2.</span>..<span class="number">.0</span></span><br><span class="line">    <span class="number">2</span> / <span class="number">2</span>  = <span class="number">1.</span>..<span class="number">.0</span></span><br><span class="line">    <span class="number">1</span> / <span class="number">2</span>  = <span class="number">0.</span>..<span class="number">.1</span></span><br><span class="line">    反序取余数   <span class="number">10011</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.jpg"></p><p><img src="/NiuNiu-zhang/NiuNiu-zhang.github/blog\source\images\进制转换.jpg"></p><p>10进制中的 小数部分–&gt;2进制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex: <span class="number">0.75</span></span><br><span class="line">小数不断×<span class="number">2</span>取整，直到没有小数为止，注意:不是所有的小数都可以转为 <span class="number">2</span> 进制</span><br><span class="line">    <span class="number">0.75</span> * <span class="number">2</span> = <span class="number">1.5</span> 取整 <span class="number">1</span></span><br><span class="line">    <span class="number">0.5</span> * <span class="number">2</span> = <span class="number">1</span>  顺序取数得:  <span class="number">0.11</span></span><br></pre></td></tr></table></figure><p>&lt;16进制—-&gt; 10进制 &gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>进制 是 <span class="number">16</span> 进 <span class="number">1</span>   </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> A(<span class="number">10</span>) <span class="function">B C D E <span class="title">F</span><span class="params">(<span class="number">15</span>)</span></span></span><br><span class="line"><span class="function">ex: 2AF5</span></span><br><span class="line"><span class="function">    </span>= <span class="number">5</span>* <span class="number">16</span>^<span class="number">0</span>  +  F*<span class="number">16</span>^<span class="number">1</span>  +  A*<span class="number">16</span>^<span class="number">2</span>  + <span class="number">2</span>*<span class="number">16</span>^<span class="number">3</span></span><br><span class="line">    = <span class="number">5</span>  +  <span class="number">15</span>*<span class="number">16</span>  +  <span class="number">10</span>*<span class="number">256</span> + <span class="number">2</span>*<span class="number">4096</span></span><br><span class="line">    = <span class="number">5</span>  +  <span class="number">240</span>    +  <span class="number">2560</span>   + <span class="number">8192</span></span><br><span class="line">    = <span class="number">10997</span></span><br></pre></td></tr></table></figure><p>&lt;10进制 —-&gt;  16进制&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">余数定理分解</span><br><span class="line">ex：  <span class="number">4877</span></span><br><span class="line"><span class="number">4877</span> / <span class="number">16</span> = <span class="number">304.</span>..<span class="number">.13</span></span><br><span class="line">    <span class="number">304</span> / <span class="number">16</span> = <span class="number">19.</span>..<span class="number">.0</span></span><br><span class="line">    <span class="number">19</span> / <span class="number">16</span>  = <span class="number">1.</span>...<span class="number">.3</span></span><br><span class="line">    <span class="number">1</span> / <span class="number">16</span>   = <span class="number">0.</span>...<span class="number">.1</span></span><br><span class="line">    结果 =  <span class="number">130</span>D   (注意顺序)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32-port1</title>
      <link href="/2020/08/04/stm32-port1/"/>
      <url>/2020/08/04/stm32-port1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/03/hello-world/"/>
      <url>/2020/08/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 NiuNiu 的技术经验分享博客网站<br>但凡流行的工具、技术，都是入门易，精通难，想有所成就，<br>都需要不懈的努力和漫长的积累，愿诸君与我共勉！<br>不缺拳打世界的勇气,<br>亦有归去风雨无晴的洒脱，<del>~</del><br>-Z</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单向不循环链表</title>
      <link href="/2020/08/02/%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/08/02/%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表：</p><p>动态的数据结构，分为数据域和指针域， 动态进行存储分配，实现数据增删</p><p>优点：</p><p>​        1、存储空间动态分配，可以根据实际需要使用</p><p>​        2、不需要地址连续的存储空间</p><p>​        3、插入/删除操作只需通过修改指针实现，不必移动数据元素， 操作时间效率高 ，插入删除事件复杂度 O(1)</p><p>缺点：</p><p>​        1、每个链节点需要设置指针域（ 存储密度小 ）</p><p>​        2、是一种非随机存储结构，查找/定位等操作都需要顺序扫描链表实现，时间效率低 O(n)</p><p>[TOC]</p><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    头节点:数据域为空</span></span><br><span class="line"><span class="comment">    头节点:数据域为空</span></span><br><span class="line"><span class="comment">    malloc 申请    &lt;malloc.h&gt;</span></span><br><span class="line"><span class="comment">    memset 初始化  &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span>  datatype;    </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link</span> * <span class="title">pNext</span>;</span></span><br><span class="line">&#125;Link;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举   中间用,    未赋值默认第一个为0</span></span><br><span class="line"><span class="keyword">enum</span> opt</span><br><span class="line">&#123;</span><br><span class="line">    ERR=<span class="number">-1</span>,</span><br><span class="line">    OK,</span><br><span class="line">    TAIL=<span class="number">-1</span>,</span><br><span class="line">    HEAD,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// [1]创建链表---即生成头节点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Link * <span class="title">createLink</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">Link * <span class="title">createLink</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Link * pHead =<span class="literal">NULL</span>;</span><br><span class="line">    pHead=(Link *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">memset</span>(pHead,<span class="string">&#x27;\0&#x27;</span>,<span class="keyword">sizeof</span>(Link));</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]插入节点---头插，尾插，中间插</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据位置给链表添加节点</span></span><br><span class="line"><span class="comment">//参数：链表首地址，要添加的元素，和插入的位置</span></span><br><span class="line"><span class="comment">//HEAD=0 TAIL=-1  其他中间</span></span><br><span class="line"><span class="comment">//返回值   成功 OK 失败 ERR</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertLink</span><span class="params">(Link * pHead, datatype item,<span class="keyword">int</span> offset)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertLink</span><span class="params">(Link * pHead, datatype item,<span class="keyword">int</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    Link * pNew=<span class="literal">NULL</span>;</span><br><span class="line">    Link * pTmp=pHead;  <span class="comment">//如果写pHead-&gt;pNext要判断是否为空所以为了方便写pHead</span></span><br><span class="line">    pNew=(Link *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pNew-&gt;data=item;</span><br><span class="line">    pNew-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(offset)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">case</span> HEAD:</span><br><span class="line">        pNew-&gt;pNext=pHead-&gt;pNext;</span><br><span class="line">        pHead-&gt;pNext=pNew;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAIL:</span><br><span class="line">        <span class="keyword">while</span>(pTmp-&gt;pNext!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pTmp=pTmp-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        pTmp-&gt;pNext=pNew;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">while</span>(k &lt; offset<span class="number">-1</span> &amp;&amp; pTmp != <span class="literal">NULL</span>) <span class="comment">//pTmp!=NULL说明找到插入位置，如果pTmp==NULL,表示未找到要free(pNew)再返回报错</span></span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            pTmp=pTmp-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pTmp==<span class="literal">NULL</span>) <span class="comment">//先判断是否为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(pNew);</span><br><span class="line">            <span class="keyword">return</span> ERR;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;pNext=pTmp-&gt;pNext;</span><br><span class="line">        pTmp-&gt;pNext=pNew;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [3]打印输出---遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">(Link * pHead)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">(Link * pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    Link * pTmp=pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">while</span>(pTmp!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,pTmp-&gt;data);</span><br><span class="line">        pTmp=pTmp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [4]删除节点----头删，尾删，中间删</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteLink</span><span class="params">(Link * pHead,<span class="keyword">int</span> offset,datatype * pData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteLink</span><span class="params">(Link * pHead,<span class="keyword">int</span> offset,datatype * pData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead||<span class="literal">NULL</span>==pData)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    Link * pDel=<span class="literal">NULL</span>;</span><br><span class="line">    Link * pPre=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span>(offset)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> HEAD:</span><br><span class="line">        pDel=pHead-&gt;pNext;</span><br><span class="line">        <span class="keyword">if</span>(pDel==<span class="literal">NULL</span>)          <span class="comment">//一定要判断</span></span><br><span class="line">        &#123;</span><br><span class="line">            *pData=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;链表为空！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        pHead-&gt;pNext=pDel-&gt;pNext;</span><br><span class="line">        <span class="comment">//先将删除的数保存</span></span><br><span class="line">        *pData=pDel-&gt;data;</span><br><span class="line">        <span class="built_in">free</span>(pDel);</span><br><span class="line">        pDel=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> TAIL:</span><br><span class="line">        pPre=pHead;</span><br><span class="line">        pDel=pHead-&gt;pNext;</span><br><span class="line">        <span class="keyword">if</span>(pDel==<span class="literal">NULL</span>)   <span class="comment">//说明没有什么删除的，空链表是pHead-&gt;pNext为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;链表为空!\n&quot;</span>);</span><br><span class="line">            *pData=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> ERR;</span><br><span class="line">            <span class="keyword">while</span>(pDel-&gt;pNext!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pPre=pDel;</span><br><span class="line">                pDel=pDel-&gt;pNext;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//保存删除的数据v</span></span><br><span class="line">             *pData=pDel-&gt;data;</span><br><span class="line"></span><br><span class="line">             <span class="built_in">free</span>(pDel);</span><br><span class="line">             pDel=<span class="literal">NULL</span>;</span><br><span class="line">             <span class="comment">//把pre变成尾节点</span></span><br><span class="line">             pPre-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        pPre=pHead;</span><br><span class="line">        pDel=pHead-&gt;pNext;</span><br><span class="line">        k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;offset<span class="number">-1</span>&amp;&amp;pDel!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            pPre=pDel;          <span class="comment">//是pPre=pDel;;</span></span><br><span class="line">            pDel=pDel-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pDel==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;链表为空!\n&quot;</span>);</span><br><span class="line">            *pData=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        *pData=pDel-&gt;data;</span><br><span class="line">        pPre-&gt;pNext=pDel-&gt;pNext;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(pDel);</span><br><span class="line">        pDel=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [5]销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="function">Link * <span class="title">Destroy</span><span class="params">(Link * pHead)</span></span>;</span><br><span class="line"><span class="function">Link * <span class="title">Destroy</span><span class="params">(Link * pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Link * pDel=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//while(pDel!=NULL)                  //while(1)是死循环  永远成立；</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;<span class="comment">//找到链表中的首节点</span></span><br><span class="line">        pDel=pHead-&gt;pNext;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pDel==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保护好首节点后的所有节点</span></span><br><span class="line">        pHead-&gt;pNext=pDel-&gt;pNext;</span><br><span class="line">        <span class="comment">//释放首节点</span></span><br><span class="line">        <span class="built_in">free</span>(pDel);</span><br><span class="line">        pDel=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后再释放头节点</span></span><br><span class="line">        <span class="built_in">free</span>(pHead);</span><br><span class="line">        pHead=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表已删除\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pHead;   <span class="comment">//一定要返回  pHead  否则会错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [6]链表逆序---拓展</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Negative</span><span class="params">(Link * pHead)</span></span>;    <span class="comment">//Negative sequence  逆序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Negative</span><span class="params">(Link * pHead)</span>    <span class="comment">//Negative sequence  逆序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    Link * pA=<span class="literal">NULL</span>;</span><br><span class="line">    Link * pB=<span class="literal">NULL</span>;</span><br><span class="line">    pA=pHead-&gt;pNext;   <span class="comment">//保护好头节点后的所有节点</span></span><br><span class="line">    <span class="comment">//原链表变为空链表</span></span><br><span class="line">    pHead-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//保护好首节点后的所有节点</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pB=pA-&gt;pNext;</span><br><span class="line">        <span class="comment">//首节点插入到新链表</span></span><br><span class="line">        pA-&gt;pNext=pHead-&gt;pNext;</span><br><span class="line">        pHead-&gt;pNext=pA;</span><br><span class="line">        pA=pB;</span><br><span class="line">        <span class="keyword">if</span>(pA==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>int main()</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
